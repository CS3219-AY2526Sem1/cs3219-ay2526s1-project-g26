[
  {
    "title": "Two Sum",
    "description": "Given an array of integers `nums` of length `n`, and an integer `target`, return the smallest indices of the two numbers such that they add up to target.\n\nYou may not use the same element twice.",
    "difficulty": "Easy",
    "categories": ["array", "hash-table", "greedy"],
    "input": "The first line contains two integers `n` and `target`. The second line contains `n` integers giving the elements in `nums`.",
    "output": "Two integers that are the smallest indices. Output `-1 -1` if there no answer.",
    "examples": [
      { "input": "4 9\n2 7 11 15", "output": "0 1" },
      { "input": "3 6\n3 2 4", "output": "1 2" }
    ],
    "constraints": [],
    "hints": [
      "A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it is best to try out brute force solutions just for completeness. It is from these brute force solutions that you can come up with optimizations."
    ],
    "_reference": "https://leetcode.com/problems/two-sum/"
  },
  {
    "title": "Kth Largest Element in an Array",
    "description": "Given an integer array `nums` of length `n`, and an integer `k`, return the `kth` largest element in the array.",
    "difficulty": "Medium",
    "categories": ["array", "sorting"],
    "input": "The first line contains two integers `n` and `k`. The second line contains `n` integers giving the elements in `nums`.",
    "output": "An integer that is the `kth` largest element in the array.",
    "examples": [
      { "input": "6 2\n3 2 1 5 6 4", "output": "5" },
      { "input": "9 4\n3 2 3 1 2 4 5 5 6", "output": "4" }
    ],
    "constraints": [],
    "hints": [],
    "_reference": "https://leetcode.com/problems/kth-largest-element-in-an-array/description/"
  },
  {
    "title": "Longest Palindrome Substring",
    "description": "Given a string `s`, return the longest palindrome substring in `s`.\n\nA string is a palindrome when it reads the same backward as forward.\n\nIf there are multiple answers, return the substring with the smallest indices.",
    "difficulty": "Medium",
    "categories": ["string", "dynamic-programming"],
    "input": "A single string `s`.",
    "output": "A single string that is the longest palindrome substring.",
    "examples": [
      {
        "input": "babad",
        "output": "bab"
      },
      {
        "input": "cbbd",
        "output": "bb"
      }
    ],
    "constraints": ["`s` contains only digits and English letters."],
    "hints": [],
    "_reference": "https://leetcode.com/problems/longest-palindromic-substring/description/"
  },
  {
    "title": "Search Insert Position",
    "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.",
    "difficulty": "Easy",
    "categories": ["array", "binary-search"],
    "input": "The first line contains two integers `n` and `target`. The second line contains `n` integers giving the elements in `nums`.",
    "output": "An integer - index that would be inserted.",
    "examples": [
      { "input": "4 5\n1 3 5 6", "output": "2" },
      { "input": "4 2\n1 3 5 6", "output": "1" }
    ],
    "constraints": [
      "`nums` contains **distinct** values and are sorted in **ascending** order."
    ],
    "hints": [],
    "_reference": "https://leetcode.com/problems/search-insert-position/description/?envType=problem-list-v2&envId=binary-search"
  },
  {
    "title": "Jump Game",
    "description": "You are given an integer array `nums` of size `n`. You are initially positioned at the **first index**, and each element in the array represents your maximum jump length at that position.\n\nDetermine whether or not you can reach the last index.",
    "difficulty": "Medium",
    "categories": ["array", "dynamic-programming", "greedy"],
    "input": "The first line contains an integer `n` indicating the length of the array `nums`. The next line contains `n` integers, that are elements of `num`.",
    "output": "Output `YES` if the position is reachable, else output `NO`.",
    "examples": [
      { "input": "5\n2 3 1 1 4", "output": "YES" },
      { "input": "5\n3 2 1 0 4", "output": "NO" }
    ],
    "constraints": [],
    "hints": [],
    "_reference": "https://leetcode.com/problems/jump-game/description/?envType=problem-list-v2&envId=dynamic-programming"
  },
  {
    "title": "Number of islands",
    "description": "Given an `m x n` 2D binary grid which represents a map `1`s (land) and `0`s (water), return the number of islands.\n\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. ",
    "difficulty": "Medium",
    "categories": ["array", "graph"],
    "input": "The first line contains two integers `m` and `n`. For the next `m` lines, each line contains `n` integers where each integer is either `0` or `1`.",
    "output": "A single integer that is the number of islands.",
    "examples": [
      {
        "input": "4 5\n1 1 1 1 0\n1 1 0 1 0\n1 1 0 0 0\n0 0 0 0 0",
        "output": "1"
      },
      {
        "input": "4 5\n1 1 0 0 0 \n1 1 0 0 0\n0 0 1 0 0\n0 0 0 1 1",
        "output": "3"
      }
    ],
    "constraints": [],
    "hints": [],
    "_reference": "https://leetcode.com/problems/number-of-islands/description/?envType=problem-list-v2&envId=depth-first-search"
  },
  {
    "title": "Trapping Rain Water",
    "description": "Given `n` non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
    "difficulty": "Hard",
    "categories": ["array", "dynamic-programming"],
    "input": "The first line contains an integer `n`. The next line contains `n` non-negative integers.",
    "output": "A single integer that is the amount of water it can trap after raining.",
    "examples": [
      { "input": "12\n0 1 0 2 1 0 1 3 2 1 2 1", "output": "6" },
      { "input": "6\n4 2 0 3 2 5", "output": "9" }
    ],
    "constraints": [],
    "hints": [],
    "_reference": "https://leetcode.com/problems/trapping-rain-water/description/"
  },
  {
    "title": "Exam Manipulation",
    "description": "A group of students is taking a True/False exam. Each question is worth one point. You, as their teacher, want to make your students look as good as possibleâ€”so you cheat! (I know, you would never actually do that.) To cheat, you manipulate the answer key so that the lowest score in the class is as high as possible.\n\nWhat is the best possible lowest score you can achieve?",
    "difficulty": "Medium",
    "categories": ["array"],
    "input": "The first line contains two integers `n` and `k`, where `n` is the number of students and `k` is the number of True/False questions on the exam.\n\nEach of the next `n` lines contains a string of length `k`, consisting only of upper-case T and upper-case F. This string represents the answers that a student submitted, in the order the questions were given.",
    "output": "A single integer, the best possible lowest score in the class.",
    "examples": [
      { "input": "5 4\nTFTF\nTFFF\nTFTT\nTFFT\nTFTF", "output": "2" },
      { "input": "3 5\nTFTFT\nTFTFT\nTFTFT", "output": "5" }
    ],
    "constraints": ["1 <= n <= 1000", "1 <= k <= 10"],
    "hints": [],
    "_reference": "https://open.kattis.com/problems/exammanipulation?tab=metadata"
  },
  {
    "title": "Valid Parentheses",
    "description": "Given a string `s` containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n- Open brackets must be closed by the same type of brackets.\n- Open brackets must be closed in the correct order.\n- Every close bracket has a corresponding open bracket of the same type.",
    "difficulty": "Easy",
    "categories": ["string", "hash-table"],
    "input": "A single line containing the string `s`.",
    "output": "Output `YES` if the string is valid, else output `NO`.",
    "examples": [
      { "input": "()[]{}", "output": "YES" },
      { "input": "(]", "output": "NO" },
      { "input": "([)]", "output": "NO" }
    ],
    "constraints": ["`s` consists of parentheses only '()[]{}'."],
    "hints": ["Use a stack data structure to keep track of open brackets."],
    "_reference": "https://leetcode.com/problems/valid-parentheses/"
  },
  {
    "title": "Merge Two Sorted Lists",
    "description": "You are given two sorted lists of integers, `list1` and `list2`.\n\nMerge the two lists into one sorted list.",
    "difficulty": "Easy",
    "categories": ["linked-list", "sorting"],
    "input": "The first line contains an integer `n` for the size of the first list. The second line contains `n` integers for `list1`.\nThe third line contains an integer `m` for the size of the second list. The fourth line contains `m` integers for `list2`.",
    "output": "A single line of space-separated integers representing the merged sorted list. Output an empty line if the merged list is empty.",
    "examples": [
      { "input": "3\n1 2 4\n3\n1 3 4", "output": "1 1 2 3 4 4" },
      {
        "input": "5\n-10 -5 0 5 10\n5\n-8 -4 0 4 8",
        "output": "-10 -8 -5 -4 0 0 4 5 8 10"
      }
    ],
    "constraints": [
      "The number of elements in both lists is in the range [0, 50].",
      "The values of the elements are between -100 and 100."
    ],
    "hints": [
      "You can iterate through both lists with two pointers and build the new list."
    ],
    "_reference": "https://leetcode.com/problems/merge-two-sorted-lists/"
  },
  {
    "title": "Maximum Subarray",
    "description": "Given an integer array `nums`, find the subarray with the largest sum, and return its sum.",
    "difficulty": "Easy",
    "categories": ["array", "dynamic-programming"],
    "input": "The first line contains an integer `n`. The second line contains `n` integers representing `nums`.",
    "output": "An integer representing the largest subarray sum.",
    "examples": [
      { "input": "9\n-2 1 -3 4 -1 2 1 -5 4", "output": "6" },
      { "input": "5\n5 4 -1 7 8", "output": "23" }
    ],
    "constraints": ["1 <= n <= 1000"],
    "hints": [
      "This is a classic problem that can be solved with Kadane's Algorithm."
    ],
    "_reference": "https://leetcode.com/problems/maximum-subarray/"
  },
  {
    "title": "Contains Duplicate",
    "description": "Given an integer array `nums`, return `YES` if any value appears at least twice in the array, and `NO` if every element is distinct.",
    "difficulty": "Easy",
    "categories": ["array", "hash-table"],
    "input": "The first line contains an integer `n`. The second line contains `n` integers representing `nums`.",
    "output": "Output `YES` or `NO`.",
    "examples": [
      { "input": "4\n1 2 3 1", "output": "YES" },
      { "input": "4\n1 2 3 4", "output": "NO" }
    ],
    "constraints": [],
    "hints": ["A hash set is very efficient for this problem."],
    "_reference": "https://leetcode.com/problems/contains-duplicate/"
  },
  {
    "title": "Product of Array Except Self",
    "description": "Given an integer array `nums` of length `n`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`.",
    "difficulty": "Medium",
    "categories": ["array"],
    "input": "The first line contains an integer `n`. The second line contains `n` integers representing `nums`.",
    "output": "A single line of space-separated integers representing the answer array.",
    "examples": [
      { "input": "4\n1 2 3 4", "output": "24 12 8 6" },
      { "input": "5\n-1 1 0 -3 3", "output": "0 0 9 0 0" }
    ],
    "constraints": [
      "You must write an algorithm that runs in O(n) time and without using the division operation."
    ],
    "hints": ["Try computing prefix products and suffix products first."],
    "_reference": "https://leetcode.com/problems/product-of-array-except-self/"
  },
  {
    "title": "Validate Binary Search Tree",
    "description": "Given the root of a binary tree, determine if it is a valid binary search tree (BST).\nA valid BST is defined as follows:\n- The left subtree of a node contains only nodes with keys less than the node's key.\n- The right subtree of a node contains only nodes with keys greater than the node's key.\n- Both the left and right subtrees must also be binary search trees.",
    "difficulty": "Medium",
    "categories": ["tree", "binary-search"],
    "input": "The first line contains an integer `n`, the number of nodes. The second line contains `n` space-separated values representing the tree in level-order, with `null` for empty nodes.",
    "output": "Output `YES` if it's a valid BST, otherwise `NO`.",
    "examples": [
      { "input": "3\n2 1 3", "output": "YES" },
      { "input": "5\n5 1 4 null null 3 6", "output": "NO" }
    ],
    "constraints": [],
    "hints": [
      "You need to check more than just `root.left.val < root.val`. The entire left subtree must be smaller."
    ],
    "_reference": "https://leetcode.com/problems/validate-binary-search-tree/"
  },
  {
    "title": "Coin Change",
    "description": "You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.",
    "difficulty": "Medium",
    "categories": ["dynamic-programming", "array"],
    "input": "The first line contains two integers `n` (number of coin types) and `amount`. The second line contains `n` integers representing the coin denominations.",
    "output": "The minimum number of coins required, or -1 if not possible.",
    "examples": [
      { "input": "3 11\n1 2 5", "output": "3" },
      { "input": "1 3\n2", "output": "-1" }
    ],
    "constraints": [
      "You may assume that you have an infinite number of each kind of coin."
    ],
    "hints": [
      "This is a classic dynamic programming problem. Think about the subproblems."
    ],
    "_reference": "https://leetcode.com/problems/coin-change/"
  },
  {
    "title": "Rotate Image",
    "description": "You are given an `n x n` 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.",
    "difficulty": "Medium",
    "categories": ["array"],
    "input": "The first line contains `n`. The next `n` lines each contain `n` integers representing the matrix.",
    "output": "The rotated `n x n` matrix, with each row on a new line.",
    "examples": [
      { "input": "3\n1 2 3\n4 5 6\n7 8 9", "output": "7 4 1\n8 5 2\n9 6 3" }
    ],
    "constraints": [],
    "hints": [
      "A common approach is to first transpose the matrix and then reverse each row."
    ],
    "_reference": "https://leetcode.com/problems/rotate-image/"
  },
  {
    "title": "Longest Increasing Subsequence",
    "description": "Given an integer array `nums`, return the length of the longest strictly increasing subsequence.",
    "difficulty": "Medium",
    "categories": ["array", "dynamic-programming", "binary-search"],
    "input": "The first line contains an integer `n`. The second line contains `n` integers representing `nums`.",
    "output": "A single integer for the length of the LIS.",
    "examples": [
      { "input": "8\n10 9 2 5 3 7 101 18", "output": "4" },
      { "input": "7\n0 1 0 3 2 3", "output": "4" }
    ],
    "constraints": [],
    "hints": [
      "There is an O(n^2) DP solution and a more clever O(n log n) solution."
    ],
    "_reference": "https://leetcode.com/problems/longest-increasing-subsequence/"
  },
  {
    "title": "Word Break",
    "description": "Given a string `s` and a dictionary of strings `wordDict`, return `YES` if `s` can be segmented into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation.",
    "difficulty": "Medium",
    "categories": ["dynamic-programming", "hash-table", "string"],
    "input": "The first line contains the string `s`. The second line contains an integer `n` for the number of words in the dictionary. The next `n` lines contain the dictionary words.",
    "output": "Output `YES` or `NO`.",
    "examples": [
      { "input": "leetcode\n2\nleet\ncode", "output": "YES" },
      { "input": "applepenapple\n2\naapl\npen", "output": "NO" }
    ],
    "constraints": [],
    "hints": [
      "Use dynamic programming where `dp[i]` represents if the prefix of `s` of length `i` can be segmented."
    ],
    "_reference": "https://leetcode.com/problems/word-break/"
  },
  {
    "title": "Combination Sum",
    "description": "Given an array of distinct integers `candidates` and a target integer `target`, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. You may return the combinations in any order. The same number may be chosen from `candidates` an unlimited number of times.",
    "difficulty": "Medium",
    "categories": ["array", "graph"],
    "input": "The first line contains `n` and `target`. The second line contains `n` integers for `candidates`.",
    "output": "Each line should be a unique combination of space-separated integers.",
    "examples": [{ "input": "4 7\n2 3 6 7", "output": "2 2 3\n7" }],
    "constraints": [],
    "hints": [
      "Backtracking is a suitable approach for finding all combinations."
    ],
    "_reference": "https://leetcode.com/problems/combination-sum/"
  },
  {
    "title": "Find Minimum in Rotated Sorted Array",
    "description": "Suppose an array of length `n` sorted in ascending order is rotated between 1 and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become `[4,5,6,7,0,1,2]`. Given the sorted rotated array `nums` of unique elements, return the minimum element of this array. You must write an algorithm that runs in O(log n) time.",
    "difficulty": "Medium",
    "categories": ["array", "binary-search"],
    "input": "The first line contains `n`. The second line contains `n` integers.",
    "output": "The minimum element.",
    "examples": [
      { "input": "7\n3 4 5 1 2", "output": "1" },
      { "input": "5\n11 13 15 17", "output": "11" }
    ],
    "constraints": ["All elements of `nums` are unique."],
    "hints": ["Use a modified binary search to find the inflection point."],
    "_reference": "https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/"
  },
  {
    "title": "Container With Most Water",
    "description": "You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `ith` line are `(i, 0)` and `(i, height[i])`. Find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water a container can store.",
    "difficulty": "Medium",
    "categories": ["array", "greedy"],
    "input": "The first line contains `n`. The second line contains `n` integers.",
    "output": "The maximum area.",
    "examples": [{ "input": "9\n1 8 6 2 5 4 8 3 7", "output": "49" }],
    "constraints": [],
    "hints": [
      "Use a two-pointer approach, starting from the widest possible container."
    ],
    "_reference": "https://leetcode.com/problems/container-with-most-water/"
  },
  {
    "title": "Median of Two Sorted Arrays",
    "description": "Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).",
    "difficulty": "Hard",
    "categories": ["array", "binary-search"],
    "input": "First line: `m`. Second line: `m` integers for `nums1`. Third line: `n`. Fourth line: `n` integers for `nums2`.",
    "output": "The median value, with one decimal place.",
    "examples": [
      { "input": "2\n1 3\n1\n2", "output": "2.0" },
      { "input": "2\n1 2\n2\n3 4", "output": "2.5" }
    ],
    "constraints": [],
    "hints": [
      "The key is to find the correct partition in both arrays that divides the combined array into two equal halves."
    ],
    "_reference": "https://leetcode.com/problems/median-of-two-sorted-arrays/"
  },
  {
    "title": "Largest Rectangle in Histogram",
    "description": "Given an array of integers `heights` representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.",
    "difficulty": "Hard",
    "categories": ["array", "hash-table"],
    "input": "First line: `n`. Second line: `n` integers for `heights`.",
    "output": "The area of the largest rectangle.",
    "examples": [{ "input": "6\n2 1 5 6 2 3", "output": "10" }],
    "constraints": [],
    "hints": [
      "A stack can be used to keep track of bars in increasing height order."
    ],
    "_reference": "https://leetcode.com/problems/largest-rectangle-in-histogram/"
  },
  {
    "title": "Merge k Sorted Lists",
    "description": "You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.",
    "difficulty": "Hard",
    "categories": ["linked-list", "sorting"],
    "input": "First line: `k`. Following lines contain `n_i` on one line and `n_i` integers on the next, for each of the `k` lists.",
    "output": "A single line of space-separated integers for the merged list.",
    "examples": [
      { "input": "3\n3\n1 4 5\n3\n1 3 4\n2\n2 6", "output": "1 1 2 3 4 4 5 6" }
    ],
    "constraints": [],
    "hints": [
      "A min-heap (priority queue) is very effective for this problem."
    ],
    "_reference": "https://leetcode.com/problems/merge-k-sorted-lists/"
  },
  {
    "title": "Regular Expression Matching",
    "description": "Given an input string `s` and a pattern `p`, implement regular expression matching with support for `.` and `*`.\n- `.` Matches any single character.\n- `*` Matches zero or more of the preceding element.",
    "difficulty": "Hard",
    "categories": ["string", "dynamic-programming"],
    "input": "First line: string `s`. Second line: pattern `p`.",
    "output": "`YES` if the pattern matches the entire string, `NO` otherwise.",
    "examples": [
      { "input": "aa\na", "output": "NO" },
      { "input": "aa\na*", "output": "YES" },
      { "input": "ab\n.*", "output": "YES" }
    ],
    "constraints": [],
    "hints": [
      "Use dynamic programming. Let `dp[i][j]` be true if the first `i` characters of `s` match the first `j` characters of `p`."
    ],
    "_reference": "https://leetcode.com/problems/regular-expression-matching/"
  },
  {
    "title": "Binary Tree Maximum Path Sum",
    "description": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node's values in the path. Given the root of a binary tree, return the maximum path sum of any non-empty path.",
    "difficulty": "Hard",
    "categories": ["tree", "dynamic-programming"],
    "input": "The first line contains an integer `n`, the number of nodes. The second line contains `n` space-separated values representing the tree in level-order, with `null` for empty nodes.",
    "output": "The maximum path sum.",
    "examples": [
      { "input": "3\n1 2 3", "output": "6" },
      { "input": "7\n-10 9 20 null null 15 7", "output": "42" }
    ],
    "constraints": [],
    "hints": [
      "For each node, compute the max path sum that goes through it. You'll need a recursive helper function."
    ],
    "_reference": "https://leetcode.com/problems/binary-tree-maximum-path-sum/"
  },
  {
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes `n` steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
    "difficulty": "Easy",
    "categories": ["dynamic-programming"],
    "input": "A single integer `n`.",
    "output": "The number of distinct ways.",
    "examples": [
      { "input": "2", "output": "2" },
      { "input": "3", "output": "3" }
    ],
    "constraints": ["1 <= n <= 45"],
    "hints": ["This problem is a variation of the Fibonacci sequence."],
    "_reference": "https://leetcode.com/problems/climbing-stairs/"
  },
  {
    "title": "Invert Binary Tree",
    "description": "Given the root of a binary tree, invert the tree, and return its root.",
    "difficulty": "Easy",
    "categories": ["tree"],
    "input": "The first line contains an integer `n`, the number of nodes. The second line contains `n` space-separated values representing the tree in level-order, with `null` for empty nodes.",
    "output": "A single line of space-separated values representing the inverted tree in level-order.",
    "examples": [{ "input": "7\n4 2 7 1 3 6 9", "output": "4 7 2 9 6 3 1" }],
    "constraints": [],
    "hints": [
      "Solve this problem recursively by swapping the left and right children of each node."
    ],
    "_reference": "https://leetcode.com/problems/invert-binary-tree/"
  },
  {
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "difficulty": "Easy",
    "categories": ["array", "greedy"],
    "input": "The first line contains an integer `n`. The second line contains `n` integers for `prices`.",
    "output": "The maximum profit.",
    "examples": [
      { "input": "6\n7 1 5 3 6 4", "output": "5" },
      { "input": "5\n7 6 4 3 1", "output": "0" }
    ],
    "constraints": [],
    "hints": [
      "Keep track of the minimum price found so far as you iterate through the array."
    ],
    "_reference": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock/"
  },
  {
    "title": "Group Anagrams",
    "description": "Given an array of strings `strs`, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "difficulty": "Medium",
    "categories": ["string", "hash-table"],
    "input": "The first line contains an integer `n`. The next `n` lines contain the strings.",
    "output": "Each line of output should contain a group of space-separated anagrams.",
    "examples": [
      {
        "input": "6\neat\ntea\ntan\nate\nnat\nbat",
        "output": "eat tea ate\ntan nat\nbat"
      }
    ],
    "constraints": [],
    "hints": [
      "A hash map can be used where the key is the sorted version of a string."
    ],
    "_reference": "https://leetcode.com/problems/group-anagrams/"
  },
  {
    "title": "Course Schedule",
    "description": "There are a total of `numCourses` courses you have to take, labeled from 0 to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`. Return `YES` if you can finish all courses. Otherwise, return `NO`.",
    "difficulty": "Medium",
    "categories": ["graph", "sorting"],
    "input": "The first line contains `numCourses` and `p`, the number of prerequisites. The next `p` lines each contain a pair `ai bi`.",
    "output": "`YES` or `NO`.",
    "examples": [
      { "input": "2 1\n1 0", "output": "YES" },
      { "input": "2 2\n1 0\n0 1", "output": "NO" }
    ],
    "constraints": [],
    "hints": [
      "This problem is equivalent to finding if a cycle exists in a directed graph. Topological sort can be used."
    ],
    "_reference": "https://leetcode.com/problems/course-schedule/"
  }
]
