[
  {
    "title": "Two Sum",
    "input": "The first line contains two integers `n` and `target`. The second line contains `n` integers giving the elements in `nums`.",
    "output": "Two integers that are the smallest indices. Output `-1 -1` if there no answer.",
    "description": "Given an array of integers `nums` of length `n`, and an integer `target`, return the smallest indices of the two numbers such that they add up to target.\n\nYou may not use the same element twice.",
    "difficulty": "easy",
    "categories": ["array", "hash-table", "greedy"],
    "examples": [
      {
        "input": "4 9\n2 7 11 15",
        "output": "0 1",
        "is_hidden": false
      },
      {
        "input": "3 6\n3 2 4",
        "output": "1 2",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [
      "A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it is best to try out brute force solutions just for completeness. It is from these brute force solutions that you can come up with optimizations."
    ],
    "test_cases": [
      {
        "input": "4 9\n2 7 11 15",
        "output": "0 1",
        "is_hidden": false
      },
      {
        "input": "3 6\n3 2 4",
        "output": "1 2",
        "is_hidden": false
      },
      {
        "input": "6 4\n18 3 1 1 15 25",
        "output": "1 2",
        "is_hidden": true
      },
      {
        "input": "7 45\n6 23 8 2 12 33 12",
        "output": "4 5",
        "is_hidden": true
      },
      {
        "input": "13 32\n22 21 23 12 26 27 30 27 12 19 2 2 27",
        "output": "6 10",
        "is_hidden": true
      },
      {
        "input": "15 21\n6 14 18 9 26 21 2 14 5 16 14 26 3 25 10",
        "output": "2 12",
        "is_hidden": true
      },
      {
        "input": "4 22\n16 7 21 15",
        "output": "1 3",
        "is_hidden": true
      },
      {
        "input": "7 27\n30 3 24 3 2 26 29",
        "output": "1 2",
        "is_hidden": true
      },
      {
        "input": "13 3\n16 14 30 2 8 1 8 6 13 6 22 28 20",
        "output": "3 5",
        "is_hidden": true
      },
      {
        "input": "11 32\n10 7 20 9 5 20 9 26 24 22 21",
        "output": "0 9",
        "is_hidden": true
      },
      {
        "input": "13 22\n29 16 7 4 11 5 10 4 11 22 16 25 27",
        "output": "4 8",
        "is_hidden": true
      },
      {
        "input": "15 11\n4 4 8 21 5 30 12 1 2 25 26 16 3 28 14",
        "output": "2 12",
        "is_hidden": true
      },
      {
        "input": "13 2\n4 5 1 17 3 20 21 20 5 1 30 5 24",
        "output": "2 9",
        "is_hidden": true
      },
      {
        "input": "5 32\n18 26 7 23 14",
        "output": "0 4",
        "is_hidden": true
      },
      {
        "input": "15 15\n3 20 19 26 12 13 10 24 25 28 24 14 2 29 14",
        "output": "0 4",
        "is_hidden": true
      },
      {
        "input": "4 45\n13 27 43 2",
        "output": "2 3",
        "is_hidden": true
      },
      {
        "input": "2 18\n10 8",
        "output": "0 1",
        "is_hidden": true
      },
      {
        "input": "4 8\n2 26 20 6",
        "output": "0 3",
        "is_hidden": true
      },
      {
        "input": "2 35\n34 1",
        "output": "0 1",
        "is_hidden": true
      },
      {
        "input": "3 11\n6 5 23",
        "output": "0 1",
        "is_hidden": true
      },
      {
        "input": "13 11\n9 30 22 25 22 22 5 25 13 23 16 6 2",
        "output": "0 12",
        "is_hidden": true
      },
      {
        "input": "12 25\n8 1 25 20 8 26 17 10 29 15 5 10",
        "output": "0 6",
        "is_hidden": true
      },
      {
        "input": "7 36\n1 25 23 15 13 18 18",
        "output": "2 4",
        "is_hidden": true
      },
      {
        "input": "8 16\n13 3 2 4 3 20 13 5",
        "output": "0 1",
        "is_hidden": true
      },
      {
        "input": "3 11\n9 9 2",
        "output": "0 2",
        "is_hidden": true
      },
      {
        "input": "4 12\n9 4 8 17",
        "output": "1 2",
        "is_hidden": true
      },
      {
        "input": "9 3\n25 7 19 10 22 17 8 1 2",
        "output": "7 8",
        "is_hidden": true
      },
      {
        "input": "12 11\n8 17 28 4 27 22 12 2 25 13 9 9",
        "output": "7 10",
        "is_hidden": true
      },
      {
        "input": "4 15\n14 30 1 7",
        "output": "0 2",
        "is_hidden": true
      },
      {
        "input": "14 18\n12 21 26 26 22 24 27 6 26 26 14 6 17 8",
        "output": "0 7",
        "is_hidden": true
      },
      {
        "input": "5 5\n9 4 4 4 1",
        "output": "1 4",
        "is_hidden": true
      },
      {
        "input": "11 17\n5 24 10 10 24 6 28 28 2 7 5",
        "output": "2 9",
        "is_hidden": true
      },
      {
        "input": "15 49\n20 5 32 21 23 21 11 29 3 10 20 17 12 24 8",
        "output": "0 7",
        "is_hidden": true
      },
      {
        "input": "7 42\n7 26 2 17 21 14 25",
        "output": "3 6",
        "is_hidden": true
      },
      {
        "input": "15 17\n4 18 20 3 8 6 25 29 27 2 2 15 29 23 30",
        "output": "9 11",
        "is_hidden": true
      },
      {
        "input": "12 19\n7 22 6 10 15 21 27 26 8 11 4 4",
        "output": "4 10",
        "is_hidden": true
      },
      {
        "input": "4 27\n12 25 21 6",
        "output": "2 3",
        "is_hidden": true
      },
      {
        "input": "15 2\n29 14 22 3 15 1 1 19 8 12 5 3 17 9 26",
        "output": "5 6",
        "is_hidden": true
      },
      {
        "input": "11 33\n18 2 13 2 15 23 11 11 23 10 29",
        "output": "0 4",
        "is_hidden": true
      },
      {
        "input": "2 26\n11 15",
        "output": "0 1",
        "is_hidden": true
      },
      {
        "input": "9 48\n16 19 32 8 17 23 6 22 25",
        "output": "0 2",
        "is_hidden": true
      },
      {
        "input": "8 20\n19 1 11 16 1 4 20 30",
        "output": "0 1",
        "is_hidden": true
      },
      {
        "input": "5 9\n3 16 6 3 15",
        "output": "0 2",
        "is_hidden": true
      },
      {
        "input": "14 44\n26 4 10 4 9 11 25 28 24 17 20 16 13 27",
        "output": "7 11",
        "is_hidden": true
      },
      {
        "input": "6 15\n27 29 1 4 8 11",
        "output": "3 5",
        "is_hidden": true
      },
      {
        "input": "9 32\n23 25 7 27 1 5 18 1 16",
        "output": "1 2",
        "is_hidden": true
      },
      {
        "input": "14 32\n18 12 14 27 3 22 28 23 17 11 19 18 1 7",
        "output": "0 2",
        "is_hidden": true
      },
      {
        "input": "7 16\n3 2 19 14 29 15 2",
        "output": "1 3",
        "is_hidden": true
      },
      {
        "input": "15 33\n17 16 5 11 21 6 4 27 29 5 8 22 17 7 18",
        "output": "0 1",
        "is_hidden": true
      },
      {
        "input": "7 23\n12 13 27 12 18 30 11",
        "output": "0 6",
        "is_hidden": true
      },
      {
        "input": "10 46\n19 25 19 28 43 3 7 2 11 26",
        "output": "4 5",
        "is_hidden": true
      },
      {
        "input": "8 32\n11 23 12 10 9 18 26 17",
        "output": "1 4",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Kth Largest Element in an Array",
    "input": "The first line contains two integers `n` and `k`. The second line contains `n` integers giving the elements in `nums`.",
    "output": "An integer that is the `kth` largest element in the array.",
    "description": "Given an integer array `nums` of length `n`, and an integer `k`, return the `kth` largest element in the array.",
    "difficulty": "medium",
    "categories": ["array", "sorting"],
    "examples": [
      {
        "input": "6 2\n3 2 1 5 6 4",
        "output": "5",
        "is_hidden": false
      },
      {
        "input": "9 4\n3 2 3 1 2 4 5 5 6",
        "output": "4",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [],
    "test_cases": [
      {
        "input": "6 2\n3 2 1 5 6 4",
        "output": "5",
        "is_hidden": false
      },
      {
        "input": "9 4\n3 2 3 1 2 4 5 5 6",
        "output": "4",
        "is_hidden": false
      },
      {
        "input": "3 1\n48 44 4",
        "output": "48",
        "is_hidden": true
      },
      {
        "input": "11 10\n22 15 9 25 25 2 18 36 11 37 50",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "4 1\n44 11 26 30",
        "output": "44",
        "is_hidden": true
      },
      {
        "input": "10 7\n26 7 7 39 36 14 8 13 43 25",
        "output": "13",
        "is_hidden": true
      },
      {
        "input": "12 6\n20 19 23 22 44 45 37 42 50 20 18 26",
        "output": "26",
        "is_hidden": true
      },
      {
        "input": "9 4\n24 2 7 28 8 23 45 30 27",
        "output": "27",
        "is_hidden": true
      },
      {
        "input": "13 6\n18 4 19 3 31 4 33 30 20 16 25 24 22",
        "output": "22",
        "is_hidden": true
      },
      {
        "input": "15 3\n26 6 36 44 21 5 34 31 19 39 17 39 48 4 40",
        "output": "40",
        "is_hidden": true
      },
      {
        "input": "4 4\n21 8 32 22",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "7 3\n15 8 13 19 18 14 19",
        "output": "18",
        "is_hidden": true
      },
      {
        "input": "15 13\n38 50 15 25 24 28 2 14 35 20 2 1 31 31 44",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "2 2\n45 10",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "2 1\n32 5",
        "output": "32",
        "is_hidden": true
      },
      {
        "input": "3 1\n48 47 3",
        "output": "48",
        "is_hidden": true
      },
      {
        "input": "14 5\n45 50 23 46 1 14 39 5 23 28 30 46 18 30",
        "output": "39",
        "is_hidden": true
      },
      {
        "input": "12 5\n41 30 26 15 18 40 29 47 7 17 22 13",
        "output": "29",
        "is_hidden": true
      },
      {
        "input": "10 1\n11 7 7 50 29 11 25 32 7 24",
        "output": "50",
        "is_hidden": true
      },
      {
        "input": "9 3\n50 24 44 39 35 23 28 47 28",
        "output": "44",
        "is_hidden": true
      },
      {
        "input": "14 3\n36 17 33 30 19 6 47 43 10 12 39 27 12 34",
        "output": "39",
        "is_hidden": true
      },
      {
        "input": "11 2\n41 46 33 27 47 33 4 32 49 4 26",
        "output": "47",
        "is_hidden": true
      },
      {
        "input": "8 2\n44 36 38 35 50 10 43 23",
        "output": "44",
        "is_hidden": true
      },
      {
        "input": "8 4\n33 6 40 11 27 14 33 50",
        "output": "33",
        "is_hidden": true
      },
      {
        "input": "14 13\n13 20 16 20 12 47 14 50 22 35 24 12 46 18",
        "output": "12",
        "is_hidden": true
      },
      {
        "input": "11 5\n47 2 27 41 36 29 24 46 21 29 31",
        "output": "31",
        "is_hidden": true
      },
      {
        "input": "8 6\n8 45 21 3 25 45 26 32",
        "output": "21",
        "is_hidden": true
      },
      {
        "input": "4 3\n1 20 35 11",
        "output": "11",
        "is_hidden": true
      },
      {
        "input": "8 3\n17 19 14 46 27 25 39 20",
        "output": "27",
        "is_hidden": true
      },
      {
        "input": "7 4\n7 48 27 30 26 35 19",
        "output": "27",
        "is_hidden": true
      },
      {
        "input": "10 5\n27 12 32 15 22 40 37 37 47 28",
        "output": "32",
        "is_hidden": true
      },
      {
        "input": "10 9\n22 50 8 12 48 30 49 28 28 20",
        "output": "12",
        "is_hidden": true
      },
      {
        "input": "8 2\n17 27 46 5 4 16 9 7",
        "output": "27",
        "is_hidden": true
      },
      {
        "input": "9 8\n13 41 12 14 19 47 12 13 43",
        "output": "12",
        "is_hidden": true
      },
      {
        "input": "4 1\n16 21 24 22",
        "output": "24",
        "is_hidden": true
      },
      {
        "input": "5 2\n3 44 5 45 9",
        "output": "44",
        "is_hidden": true
      },
      {
        "input": "15 3\n31 33 5 29 45 49 18 36 39 46 25 25 13 10 9",
        "output": "45",
        "is_hidden": true
      },
      {
        "input": "13 3\n27 11 16 3 1 25 47 18 34 27 15 43 29",
        "output": "34",
        "is_hidden": true
      },
      {
        "input": "3 1\n29 18 40",
        "output": "40",
        "is_hidden": true
      },
      {
        "input": "4 1\n20 41 49 25",
        "output": "49",
        "is_hidden": true
      },
      {
        "input": "12 1\n2 18 19 45 31 19 50 42 5 15 1 35",
        "output": "50",
        "is_hidden": true
      },
      {
        "input": "9 9\n27 9 4 7 17 34 36 49 34",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "5 5\n14 26 26 42 26",
        "output": "14",
        "is_hidden": true
      },
      {
        "input": "2 2\n49 44",
        "output": "44",
        "is_hidden": true
      },
      {
        "input": "13 6\n38 28 17 48 5 4 39 11 5 32 33 28 21",
        "output": "28",
        "is_hidden": true
      },
      {
        "input": "4 4\n10 39 30 18",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "13 4\n9 26 30 12 36 50 33 39 28 9 44 18 44",
        "output": "39",
        "is_hidden": true
      },
      {
        "input": "13 11\n42 10 47 15 21 15 1 7 25 48 49 18 14",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "15 7\n2 23 33 37 8 5 25 7 7 30 26 27 46 18 49",
        "output": "26",
        "is_hidden": true
      },
      {
        "input": "12 4\n9 42 48 39 11 17 9 21 1 26 28 37",
        "output": "37",
        "is_hidden": true
      },
      {
        "input": "9 9\n14 6 19 34 35 10 37 13 48",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "14 3\n20 43 22 6 12 18 1 40 34 27 32 39 8 40",
        "output": "40",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Longest Palindrome Substring",
    "input": "A single string `s`.",
    "output": "A single string that is the longest palindrome substring.",
    "description": "Given a string `s`, return the longest palindrome substring in `s`.\n\nA string is a palindrome when it reads the same backward as forward.\n\nIf there are multiple answers, return the substring with the smallest indices.",
    "difficulty": "medium",
    "categories": ["string", "dynamic-programming"],
    "examples": [
      {
        "input": "babad",
        "output": "bab",
        "is_hidden": false
      },
      {
        "input": "cbbd",
        "output": "bb",
        "is_hidden": false
      }
    ],
    "constraints": ["`s` contains only digits and English letters."],
    "hints": [],
    "test_cases": [
      {
        "input": "babad",
        "output": "bab",
        "is_hidden": false
      },
      {
        "input": "cbbd",
        "output": "bb",
        "is_hidden": false
      },
      {
        "input": "racecarxyz",
        "output": "racecar",
        "is_hidden": true
      },
      {
        "input": "noonatmidnight",
        "output": "noon",
        "is_hidden": true
      },
      {
        "input": "forgeeksskeegfor",
        "output": "geeksskeeg",
        "is_hidden": true
      },
      {
        "input": "abacdfgdcaba",
        "output": "aba",
        "is_hidden": true
      },
      {
        "input": "abcbaabc",
        "output": "cbaabc",
        "is_hidden": true
      },
      {
        "input": "abcdedcba",
        "output": "abcdedcba",
        "is_hidden": true
      },
      {
        "input": "xyzzyxabc",
        "output": "xyzzyx",
        "is_hidden": true
      },
      {
        "input": "levelup",
        "output": "level",
        "is_hidden": true
      },
      {
        "input": "abaxyzzyxf",
        "output": "xyzzyx",
        "is_hidden": true
      },
      {
        "input": "abcdcbae",
        "output": "abcdcba",
        "is_hidden": true
      },
      {
        "input": "madamimadam",
        "output": "madamimadam",
        "is_hidden": true
      },
      {
        "input": "referendum",
        "output": "refer",
        "is_hidden": true
      },
      {
        "input": "palindromemordnilap",
        "output": "palindromemordnilap",
        "is_hidden": true
      },
      {
        "input": "rotatorwheel",
        "output": "rotator",
        "is_hidden": true
      },
      {
        "input": "deifiedroad",
        "output": "deified",
        "is_hidden": true
      },
      {
        "input": "civicduty",
        "output": "civic",
        "is_hidden": true
      },
      {
        "input": "redderbike",
        "output": "redder",
        "is_hidden": true
      },
      {
        "input": "reviverplan",
        "output": "reviver",
        "is_hidden": true
      },
      {
        "input": "tenetlong",
        "output": "tenet",
        "is_hidden": true
      },
      {
        "input": "wowthatscool",
        "output": "wow",
        "is_hidden": true
      },
      {
        "input": "kayaktrip",
        "output": "kayak",
        "is_hidden": true
      },
      {
        "input": "noonlight",
        "output": "noon",
        "is_hidden": true
      },
      {
        "input": "momentswithmom",
        "output": "mom",
        "is_hidden": true
      },
      {
        "input": "dadbod",
        "output": "dad",
        "is_hidden": true
      },
      {
        "input": "statsreport",
        "output": "stats",
        "is_hidden": true
      },
      {
        "input": "peepthrough",
        "output": "peep",
        "is_hidden": true
      },
      {
        "input": "gigglepalindrome",
        "output": "gig",
        "is_hidden": true
      },
      {
        "input": "eyecontact",
        "output": "eye",
        "is_hidden": true
      },
      {
        "input": "popculture",
        "output": "pop",
        "is_hidden": true
      },
      {
        "input": "malayalamword",
        "output": "malayalam",
        "is_hidden": true
      },
      {
        "input": "aibohphobia",
        "output": "aibohphobia",
        "is_hidden": true
      },
      {
        "input": "annaandherfriends",
        "output": "anna",
        "is_hidden": true
      },
      {
        "input": "racecarandtruck",
        "output": "racecar",
        "is_hidden": true
      },
      {
        "input": "madamtaxi",
        "output": "madam",
        "is_hidden": true
      },
      {
        "input": "momanddad",
        "output": "mom",
        "is_hidden": true
      },
      {
        "input": "abbaabba",
        "output": "abbaabba",
        "is_hidden": true
      },
      {
        "input": "abbaabcddcba",
        "output": "abcddcba",
        "is_hidden": true
      },
      {
        "input": "abcdxyzzyxdcba",
        "output": "abcdxyzzyxdcba",
        "is_hidden": true
      },
      {
        "input": "tracedetecart",
        "output": "ede",
        "is_hidden": true
      },
      {
        "input": "aaabaaa",
        "output": "aaabaaa",
        "is_hidden": true
      },
      {
        "input": "aabbccbbaa",
        "output": "aabbccbbaa",
        "is_hidden": true
      },
      {
        "input": "bbaccab",
        "output": "baccab",
        "is_hidden": true
      },
      {
        "input": "opqrsrsrqpo",
        "output": "opqrsrsrqpo",
        "is_hidden": true
      },
      {
        "input": "abcddcbae",
        "output": "abcddcba",
        "is_hidden": true
      },
      {
        "input": "noonononoon",
        "output": "noonononoon",
        "is_hidden": true
      },
      {
        "input": "tattarrattat",
        "output": "tattarrattat",
        "is_hidden": true
      },
      {
        "input": "abcddcbax",
        "output": "abcddcba",
        "is_hidden": true
      },
      {
        "input": "redividerxyz",
        "output": "redivider",
        "is_hidden": true
      },
      {
        "input": "wowamazingwow",
        "output": "wow",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Search Insert Position",
    "input": "The first line contains two integers `n` and `target`. The second line contains `n` integers giving the elements in `nums`.",
    "output": "An integer - index that would be inserted.",
    "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.",
    "difficulty": "easy",
    "categories": ["array", "binary-search"],
    "examples": [
      {
        "input": "4 5\n1 3 5 6",
        "output": "2",
        "is_hidden": false
      },
      {
        "input": "4 2\n1 3 5 6",
        "output": "1",
        "is_hidden": false
      }
    ],
    "constraints": [
      "`nums` contains **distinct** values and are sorted in **ascending** order."
    ],
    "hints": [],
    "test_cases": [
      {
        "input": "4 5\n1 3 5 6",
        "output": "2",
        "is_hidden": false
      },
      {
        "input": "4 2\n1 3 5 6",
        "output": "1",
        "is_hidden": false
      },
      {
        "input": "5 3\n1 2 4 5 6",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 7\n1 3 5 6",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "6 4\n1 2 3 5 6 7",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "3 0\n1 2 3",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "7 8\n1 2 3 4 5 6 7",
        "output": "7",
        "is_hidden": true
      },
      {
        "input": "5 10\n1 2 3 4 5",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "4 2\n1 3 5 7",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "6 9\n2 4 6 8 10 12",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "5 5\n1 3 5 7 9",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 6\n2 4 8",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 1\n2 3 5 6",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "6 11\n1 3 5 7 9 10",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "5 8\n1 2 4 6 7",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "4 4\n1 2 4 5",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "7 3\n0 1 2 4 5 6 7",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "8 15\n1 2 4 6 8 10 12 14",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "3 3\n1 2 4",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 6\n2 4 5 7",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "6 7\n1 3 5 6 8 10",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "5 0\n2 4 6 8 10",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "5 11\n1 3 5 9 10",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "6 13\n2 4 6 8 10 12",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "7 7\n1 3 5 6 7 9 11",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "3 1\n2 3 4",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "4 9\n1 5 6 8",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "6 2\n1 3 5 7 9 11",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "5 6\n2 4 6 8 10",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 8\n1 3 6 7",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "3 5\n2 4 6",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "7 12\n1 2 3 5 7 9 11",
        "output": "7",
        "is_hidden": true
      },
      {
        "input": "6 0\n3 5 7 9 11 13",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "5 4\n1 2 3 6 7",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "4 3\n1 2 5 6",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "7 6\n1 2 3 5 7 8 10",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "3 7\n2 4 6",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "6 14\n1 3 5 7 9 13",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "5 9\n1 2 4 6 8",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "4 10\n1 2 3 9",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "6 1\n2 4 6 8 10 12",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "5 7\n1 3 5 6 8",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "7 2\n3 4 5 6 7 8 9",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "6 5\n1 2 3 4 6 7",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "4 12\n2 4 6 10",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "3 2\n1 3 5",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "5 6\n1 3 5 7 9",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "4 11\n2 4 6 9",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "6 3\n1 2 4 5 7 8",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "5 13\n1 4 6 9 11",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "7 0\n2 3 5 7 9 11 13",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "3 10\n1 5 9",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "4 14\n1 3 5 12",
        "output": "4",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Jump Game",
    "input": "The first line contains an integer `n` indicating the length of the array `nums`. The next line contains `n` integers, that are elements of `num`.",
    "output": "Output `YES` if the position is reachable, else output `NO`.",
    "description": "You are given an integer array `nums` of size `n`. You are initially positioned at the **first index**, and each element in the array represents your maximum jump length at that position.\n\nDetermine whether or not you can reach the last index.",
    "difficulty": "medium",
    "categories": ["array", "dynamic-programming", "greedy"],
    "examples": [
      {
        "input": "5\n2 3 1 1 4",
        "output": "YES",
        "is_hidden": false
      },
      {
        "input": "5\n3 2 1 0 4",
        "output": "NO",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [],
    "test_cases": [
      {
        "input": "5\n2 3 1 1 4",
        "output": "YES",
        "is_hidden": false
      },
      {
        "input": "5\n3 2 1 0 4",
        "output": "NO",
        "is_hidden": false
      },
      {
        "input": "5\n2 3 2 1 4",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n3 2 1 0 3",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "6\n2 0 2 0 1 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "4\n1 2 0 1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "6\n1 1 1 1 1 1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "3\n2 0 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n0 1 2 3 4",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "6\n3 2 1 0 4 5",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "7\n4 2 0 0 2 0 1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "4\n2 3 1 1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n1 1 0 0 0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "6\n2 3 1 1 0 4",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "8\n5 4 0 0 1 0 2 0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n2 0 0 1 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 3 4 5",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "3\n0 1 2",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "6\n3 0 0 0 0 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "7\n2 3 1 1 0 2 0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "4\n0 2 3 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n1 1 1 0 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "6\n2 2 0 0 1 0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "7\n3 1 1 1 0 0 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n2 3 0 1 4",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "4\n1 0 1 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "3\n2 1 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n3 1 2 0 4",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "6\n1 2 0 0 1 0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "4\n3 2 1 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n2 0 2 0 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "7\n5 4 3 2 1 0 0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n1 1 0 0 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "6\n3 2 1 0 0 0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "4\n1 1 1 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "6\n2 0 0 1 1 0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n2 4 2 0 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "3\n1 1 1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "6\n3 0 0 0 0 0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 0 1 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "4\n1 1 0 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "6\n2 1 0 1 0 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "7\n2 3 1 1 4 0 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n3 2 1 0 0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "4\n0 2 1 0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "6\n2 2 1 0 0 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "3\n2 0 1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n2 0 1 0 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "6\n3 0 1 0 0 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n1 1 1 1 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "4\n0 0 0 0",
        "output": "NO",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Number of islands",
    "input": "The first line contains two integers `m` and `n`. For the next `m` lines, each line contains `n` integers where each integer is either `0` or `1`.",
    "output": "A single integer that is the number of islands.",
    "description": "Given an `m x n` 2D binary grid which represents a map `1`s (land) and `0`s (water), return the number of islands.\n\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. ",
    "difficulty": "medium",
    "categories": ["array", "graph"],
    "examples": [
      {
        "input": "4 5\n1 1 1 1 0\n1 1 0 1 0\n1 1 0 0 0\n0 0 0 0 0",
        "output": "1",
        "is_hidden": false
      },
      {
        "input": "4 5\n1 1 0 0 0 \n1 1 0 0 0\n0 0 1 0 0\n0 0 0 1 1",
        "output": "3",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [],
    "test_cases": [
      {
        "input": "4 5\n1 1 1 1 0\n1 1 0 1 0\n1 1 0 0 0\n0 0 0 0 0",
        "output": "1",
        "is_hidden": false
      },
      {
        "input": "4 5\n1 1 0 0 0 \n1 1 0 0 0\n0 0 1 0 0\n0 0 0 1 1",
        "output": "3",
        "is_hidden": false
      },
      {
        "input": "3 3\n1 1 0\n0 1 0\n1 0 1",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "4 5\n0 1 0 0 1\n1 1 0 0 0\n0 0 1 0 1\n0 0 0 1 1",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "2 2\n1 0\n0 1",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 4\n1 0 1 0\n0 1 0 1\n1 0 1 0",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "5 5\n1 1 0 0 0\n1 1 0 0 1\n0 0 0 1 1\n0 0 0 1 0\n1 0 1 0 1",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "3 3\n1 0 1\n0 1 0\n1 0 1",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "4 4\n1 1 0 0\n0 1 1 0\n0 0 1 1\n1 0 0 0",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 5\n1 1 1 0 0\n1 0 0 0 1\n0 0 1 1 1",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "2 3\n1 1 1\n1 0 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "4 4\n1 0 0 1\n0 1 1 0\n1 0 1 0\n0 1 0 1",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "3 3\n0 0 0\n0 1 0\n0 0 0",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "2 2\n1 1\n1 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "2 2\n0 0\n0 0",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "4 5\n1 1 1 1 1\n0 0 0 0 0\n1 1 1 1 1\n0 0 0 0 0",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 3\n1 0 1\n0 1 0\n1 0 1",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "5 5\n1 0 1 0 1\n0 1 0 1 0\n1 0 1 0 1\n0 1 0 1 0\n1 0 1 0 1",
        "output": "13",
        "is_hidden": true
      },
      {
        "input": "3 4\n1 1 0 0\n1 0 1 0\n0 0 0 1",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "3 3\n1 1 1\n1 1 1\n1 1 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "4 4\n0 1 0 0\n1 1 0 1\n0 0 1 1\n1 0 0 0",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "3 4\n1 0 1 0\n1 0 1 0\n1 0 1 0",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "2 5\n1 1 0 0 0\n0 1 1 1 0",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "4 4\n1 0 0 1\n0 1 1 0\n1 0 1 1\n0 0 0 1",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "3 3\n1 0 1\n0 1 0\n1 0 0",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "2 4\n1 1 0 0\n0 1 1 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "5 5\n1 0 0 0 1\n0 1 0 1 0\n0 0 1 0 0\n1 0 0 1 0\n0 1 0 0 1",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "2 2\n1 0\n1 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "3 5\n0 1 0 1 0\n1 1 1 1 1\n0 1 0 1 0",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "4 3\n1 0 1\n0 1 0\n1 0 1\n0 1 0",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "4 4\n1 1 1 1\n1 0 0 1\n1 0 0 1\n1 1 1 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "3 4\n1 1 1 0\n1 0 0 1\n0 1 1 1",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 4\n1 0 1 0\n0 1 0 1\n1 0 1 0\n0 1 0 1",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "3 3\n1 1 1\n0 0 0\n1 1 1",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "2 3\n1 0 1\n1 1 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "4 5\n0 1 0 1 0\n1 0 1 0 1\n0 1 0 1 0\n1 0 1 0 1",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "3 3\n0 0 1\n0 1 0\n1 0 0",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "5 5\n1 1 1 1 1\n1 0 0 0 1\n1 0 1 0 1\n1 0 0 0 1\n1 1 1 1 1",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "2 2\n1 0\n0 0",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "3 4\n1 1 0 0\n0 1 1 1\n1 0 0 0",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 4\n1 0 0 0\n0 1 0 0\n0 0 1 0\n0 0 0 1",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "3 5\n1 0 1 0 1\n0 1 0 1 0\n1 0 1 0 1",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "4 5\n1 1 1 1 1\n1 0 0 0 1\n1 0 1 0 1\n1 1 1 1 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "3 3\n0 1 0\n1 0 1\n0 1 0",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "2 2\n0 1\n1 0",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 3\n1 0 0\n0 1 0\n0 0 1",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "4 4\n1 1 0 0\n0 1 1 0\n0 0 1 1\n1 0 0 1",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 3\n0 1 0\n1 0 1\n0 1 0",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "2 3\n1 1 1\n1 1 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "3 4\n1 1 0 1\n0 0 1 0\n1 0 0 1",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "5 5\n0 0 1 0 0\n1 1 0 1 1\n0 0 0 0 0\n1 1 0 0 0\n0 0 1 1 1",
        "output": "5",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Trapping Rain Water",
    "input": "The first line contains an integer `n`. The next line contains `n` non-negative integers.",
    "output": "A single integer that is the amount of water it can trap after raining.",
    "description": "Given `n` non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
    "difficulty": "hard",
    "categories": ["array", "dynamic-programming"],
    "examples": [
      {
        "input": "12\n0 1 0 2 1 0 1 3 2 1 2 1",
        "output": "6",
        "is_hidden": false
      },
      {
        "input": "6\n4 2 0 3 2 5",
        "output": "9",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [],
    "test_cases": [
      {
        "input": "12\n0 1 0 2 1 0 1 3 2 1 2 1",
        "output": "6",
        "is_hidden": false
      },
      {
        "input": "6\n4 2 0 3 2 5",
        "output": "9",
        "is_hidden": false
      },
      {
        "input": "12\n3 1 0 2 1 0 1 2 2 1 2 1",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "6\n1 2 0 0 2 5",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "7\n0 2 0 4 0 3 0",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "5\n2 0 2 0 2",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "8\n3 0 1 3 0 1 2 4",
        "output": "11",
        "is_hidden": true
      },
      {
        "input": "6\n1 0 2 1 0 1",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "10\n0 3 0 1 0 2 0 4 0 1",
        "output": "13",
        "is_hidden": true
      },
      {
        "input": "7\n5 0 0 0 0 0 5",
        "output": "25",
        "is_hidden": true
      },
      {
        "input": "9\n4 2 3 0 3 1 2 1 2",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "11\n0 1 0 2 1 0 1 3 2 1 2",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "6\n3 0 2 0 4 0",
        "output": "7",
        "is_hidden": true
      },
      {
        "input": "8\n1 2 1 0 2 1 0 3",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "10\n0 2 0 4 0 2 0 3 0 1",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "5\n2 1 0 1 2",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "7\n3 1 2 0 1 0 3",
        "output": "11",
        "is_hidden": true
      },
      {
        "input": "8\n0 0 2 0 4 0 2 0",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "6\n2 0 2 1 0 1",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "9\n3 0 2 0 4 0 2 0 3",
        "output": "14",
        "is_hidden": true
      },
      {
        "input": "7\n0 1 0 2 1 0 1",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "6\n1 0 1 0 1 0",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "5\n3 0 0 0 3",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "7\n0 2 0 1 0 2 0",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "8\n4 1 1 0 2 1 3 0",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "6\n2 0 1 0 2 0",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "10\n1 0 2 1 0 1 3 2 1 2",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "7\n1 0 0 2 0 1 0",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "9\n3 0 1 2 0 1 0 3 0",
        "output": "14",
        "is_hidden": true
      },
      {
        "input": "5\n0 1 0 2 0",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "6\n1 0 2 0 1 0",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "8\n3 0 1 2 1 0 1 2",
        "output": "7",
        "is_hidden": true
      },
      {
        "input": "7\n0 2 1 0 1 3 0",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "6\n0 1 0 2 1 0",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "9\n1 0 3 0 1 2 0 4 0",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "8\n0 2 0 1 0 3 0 2",
        "output": "7",
        "is_hidden": true
      },
      {
        "input": "10\n2 0 2 1 3 0 1 0 3 2",
        "output": "11",
        "is_hidden": true
      },
      {
        "input": "5\n1 0 2 0 1",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "7\n2 0 0 1 0 0 2",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "8\n3 0 1 0 2 0 1 3",
        "output": "14",
        "is_hidden": true
      },
      {
        "input": "9\n2 1 0 1 3 0 1 2 1",
        "output": "7",
        "is_hidden": true
      },
      {
        "input": "6\n0 2 0 3 0 1",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "7\n3 0 1 2 0 3 0",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "5\n2 0 1 0 2",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "10\n4 1 1 0 2 0 3 1 2 0",
        "output": "12",
        "is_hidden": true
      },
      {
        "input": "8\n1 2 1 0 1 0 2 0",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "6\n0 1 0 1 0 1",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "7\n3 0 1 0 2 0 3",
        "output": "12",
        "is_hidden": true
      },
      {
        "input": "9\n0 1 0 2 1 0 1 3 0",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "8\n1 0 2 0 3 0 1 0",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "6\n2 0 2 0 2 0",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "5\n0 2 0 2 0",
        "output": "2",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Exam Manipulation",
    "input": "The first line contains two integers `n` and `k`, where `n` is the number of students and `k` is the number of True/False questions on the exam.\n\nEach of the next `n` lines contains a string of length `k`, consisting only of upper-case T and upper-case F. This string represents the answers that a student submitted, in the order the questions were given.",
    "output": "A single integer, the best possible lowest score in the class.",
    "description": "A group of students is taking a True/False exam. Each question is worth one point. You, as their teacher, want to make your students look as good as possible\u2014so you cheat! (I know, you would never actually do that.) To cheat, you manipulate the answer key so that the lowest score in the class is as high as possible.\n\nWhat is the best possible lowest score you can achieve?",
    "difficulty": "medium",
    "categories": ["array"],
    "examples": [
      {
        "input": "5 4\nTFTF\nTFFF\nTFTT\nTFFT\nTFTF",
        "output": "2",
        "is_hidden": false
      },
      {
        "input": "3 5\nTFTFT\nTFTFT\nTFTFT",
        "output": "5",
        "is_hidden": false
      }
    ],
    "constraints": ["1 <= n <= 1000", "1 <= k <= 10"],
    "hints": [],
    "test_cases": [
      {
        "input": "5 4\nTFTF\nTFFF\nTFTT\nTFFT\nTFTF",
        "output": "2",
        "is_hidden": false
      },
      {
        "input": "3 5\nTFTFT\nTFTFT\nTFTFT",
        "output": "5",
        "is_hidden": false
      },
      {
        "input": "5 4\nTFTF\nTFFT\nFFTT\nTFFT\nTFTF",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "3 5\nTFTFF\nFFTFT\nTFTTT",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "4 6\nTTTTTT\nFFFFFF\nTFTFTF\nFTFTFT",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "6 5\nTFTFT\nFTFTF\nTFTFT\nFTFTF\nTFTFT\nFTFTF",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "2 3\nTTT\nFFF",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "3 4\nTTTF\nTFTF\nFTTT",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "5 6\nTFTFTF\nFTFTFT\nTTTTTT\nFFFFFF\nTFTFTF",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 5\nTFTFT\nFTFTF\nTTTTT\nFFFFF",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 6\nTTTTTT\nTFTFTF\nFTFTFT",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "6 4\nTFTF\nTFTF\nTFTF\nFTFT\nFTFT\nFTFT",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "7 5\nTFTFT\nTFTFT\nFTFTF\nFTFTF\nTFTFT\nTFTFT\nFTFTF",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 7\nTTTTTTT\nFFFFFFF\nTFTFTFT",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "4 5\nTFTFT\nTFTFT\nTFTFT\nTFTFT",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "2 6\nTFTFTF\nFTFTFT",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "5 5\nTTTTT\nTFTFT\nFTFTF\nTTTTT\nFTFTF",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 4\nTFTF\nFTFT\nTFTF",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "6 3\nTTT\nTFT\nFTF\nFTT\nTFT\nFFF",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "4 7\nTFTFTFT\nFTFTFTF\nTFTFTFT\nFTFTFTF",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "5 5\nTTFFF\nFTTFT\nFTFTF\nTFTFT\nFFTTT",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 6\nTFTFTF\nTFTFTF\nFTFTFT",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "2 8\nTFTFTFTF\nFTFTFTFT",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "6 5\nTTTTT\nFTFTF\nTFTFT\nFTFTF\nTFTFT\nFTFTF",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 4\nTFTF\nFTFT\nTFTF\nFTFT",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "5 7\nTFTFTFT\nTFTFTFT\nTFTFTFT\nTFTFTFT\nTFTFTFT",
        "output": "7",
        "is_hidden": true
      },
      {
        "input": "2 5\nTTTTT\nFFFFF",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 6\nTFTFTF\nTFTFTF\nTFTFTF",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "6 4\nTFTF\nFTFT\nFTFT\nTFTF\nFTFT\nTFTF",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "5 5\nTFTFT\nFTFTF\nTFTFT\nFTFTF\nTFTFT",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 6\nTFTFTF\nFTFTFT\nTFTFTF\nFTFTFT",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "3 5\nTFTFT\nFTFTF\nTFTFT",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "2 4\nTTTT\nFFFF",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 7\nTFTFTFT\nTFTFTFT\nTFTFTFT\nTFTFTFT",
        "output": "7",
        "is_hidden": true
      },
      {
        "input": "5 6\nTFTFTF\nTFTFTF\nTFTFTF\nTFTFTF\nTFTFTF",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "6 5\nFTFTF\nTFTFT\nFTFTF\nTFTFT\nFTFTF\nTFTFT",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 5\nFTFTF\nFTFTF\nFTFTF",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "4 6\nFTFTFT\nFTFTFT\nFTFTFT\nFTFTFT",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "2 3\nTFT\nFTF",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "5 4\nTTTT\nTFTF\nFTFT\nFFFF\nTFTF",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "6 5\nFTFTF\nTFTFT\nTFTFT\nFTFTF\nTFTFT\nFTFTF",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 4\nTFTF\nTFTF\nTFTF\nTFTF",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "3 7\nFTFTFTF\nTFTFTFT\nFTFTFTF",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "2 5\nFTFTF\nTFTFT",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "5 6\nTTFTFT\nFTFTTF\nTFFTFT\nFTFTFT\nTFTFTF",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "3 4\nTFTF\nFTFT\nTFTF",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 6\nTTTTTT\nFFFFFF\nTFTFTF\nFTFTFT",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "2 4\nTFTF\nFTFT",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "6 3\nTFT\nFTF\nTFT\nFTF\nTFT\nFTF",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "5 5\nFTFTF\nFTFTF\nFTFTF\nFTFTF\nFTFTF",
        "output": "5",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Valid Parentheses",
    "input": "A single line containing the string `s`.",
    "output": "Output `YES` if the string is valid, else output `NO`.",
    "description": "Given a string `s` containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n- Open brackets must be closed by the same type of brackets.\n- Open brackets must be closed in the correct order.\n- Every close bracket has a corresponding open bracket of the same type.",
    "difficulty": "easy",
    "categories": ["string", "hash-table"],
    "examples": [
      {
        "input": "()[]{}",
        "output": "YES",
        "is_hidden": false
      },
      {
        "input": "(]",
        "output": "NO",
        "is_hidden": false
      },
      {
        "input": "([)]",
        "output": "NO",
        "is_hidden": false
      }
    ],
    "constraints": ["`s` consists of parentheses only '()[]{}'."],
    "hints": ["Use a stack data structure to keep track of open brackets."],
    "test_cases": [
      {
        "input": "()[]{}",
        "output": "YES",
        "is_hidden": false
      },
      {
        "input": "(]",
        "output": "NO",
        "is_hidden": false
      },
      {
        "input": "([)]",
        "output": "NO",
        "is_hidden": false
      },
      {
        "input": "()",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "{[]}",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "((",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "}}",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "({[]})",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "()()()",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "{[()]}",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "[({})]",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "(",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": ")",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "[",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "]",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "{",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "}",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "\n({[})",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "({]})",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "({[}])",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "([]{})",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "{{()}}",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "[[[]]]",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "()({})",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "({[<invalid>]})",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "((){[]})",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "()(())",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "()((()))",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "()((())())",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "((()))",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "((())())",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "()(())()",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "()()(())",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "(()()())",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "(())()()",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "(()())()",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "()(()())",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "(())(())",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "()((()))",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "((()))()",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "((()()))",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "()()()()",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "({)}",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "{()[]}",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "((){})",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "[()]{}",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "({[]})[]{}",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "({[]})",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "({[()]})",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "({[()]})[]",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "{{[()]}}",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "()({[]})",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "({[]()})",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "((){[]})",
        "output": "YES",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Merge Two Sorted Lists",
    "input": "The first line contains an integer `n` for the size of the first list. The second line contains `n` integers for `list1`.\nThe third line contains an integer `m` for the size of the second list. The fourth line contains `m` integers for `list2`.",
    "output": "A single line of space-separated integers representing the merged sorted list. Output an empty line if the merged list is empty.",
    "description": "You are given two sorted lists of integers, `list1` and `list2`.\n\nMerge the two lists into one sorted list.",
    "difficulty": "easy",
    "categories": ["linked-list", "sorting"],
    "examples": [
      {
        "input": "3\n1 2 4\n3\n1 3 4",
        "output": "1 1 2 3 4 4",
        "is_hidden": false
      },
      {
        "input": "5\n-10 -5 0 5 10\n5\n-8 -4 0 4 8",
        "output": "-10 -8 -5 -4 0 0 4 5 8 10",
        "is_hidden": false
      }
    ],
    "constraints": [
      "The number of elements in both lists is in the range [0, 50].",
      "The values of the elements are between -100 and 100."
    ],
    "hints": [
      "You can iterate through both lists with two pointers and build the new list."
    ],
    "test_cases": [
      {
        "input": "3\n1 2 4\n3\n1 3 4",
        "output": "1 1 2 3 4 4",
        "is_hidden": false
      },
      {
        "input": "5\n-10 -5 0 5 10\n5\n-8 -4 0 4 8",
        "output": "-10 -8 -5 -4 0 0 4 5 8 10",
        "is_hidden": false
      },
      {
        "input": "4\n1 3 5 7\n4\n2 4 6 8",
        "output": "1 2 3 4 5 6 7 8",
        "is_hidden": true
      },
      {
        "input": "5\n1 1 1 1 1\n3\n1 1 1",
        "output": "1 1 1 1 1 1 1 1",
        "is_hidden": true
      },
      {
        "input": "7\n10 20 30 40 50 60 70\n2\n5 15",
        "output": "5 10 15 20 30 40 50 60 70",
        "is_hidden": true
      },
      {
        "input": "2\n90 100\n5\n1 2 3 4 5",
        "output": "1 2 3 4 5 90 100",
        "is_hidden": true
      },
      {
        "input": "1\n-5\n1\n-5",
        "output": "-5 -5",
        "is_hidden": true
      },
      {
        "input": "3\n-3 -2 -1\n3\n1 2 3",
        "output": "-3 -2 -1 1 2 3",
        "is_hidden": true
      },
      {
        "input": "6\n2 4 6 8 10 12\n1\n5",
        "output": "2 4 5 6 8 10 12",
        "is_hidden": true
      },
      {
        "input": "4\n1 2 3 4\n4\n1 2 3 4",
        "output": "1 1 2 2 3 3 4 4",
        "is_hidden": true
      },
      {
        "input": "2\n-10 -5\n5\n-20 -15 -10 -5 0",
        "output": "-20 -15 -10 -10 -5 -5 0",
        "is_hidden": true
      },
      {
        "input": "1\n0\n1\n0",
        "output": "0 0",
        "is_hidden": true
      },
      {
        "input": "3\n5 5 5\n3\n5 5 5",
        "output": "5 5 5 5 5 5",
        "is_hidden": true
      },
      {
        "input": "7\n1 2 3 4 5 6 7\n5\n5 1 2 3 5",
        "output": "1 2 3 4 5 5 1 2 3 5 6 7",
        "is_hidden": true
      },
      {
        "input": "1\n1\n1\n100",
        "output": "1 100",
        "is_hidden": true
      },
      {
        "input": "2\n-88 -77\n2\n88 77",
        "output": "-88 -77 88 77",
        "is_hidden": true
      },
      {
        "input": "5\n-10 -8 -6 -4 -2\n5\n-9 -7 -5 -3 -1",
        "output": "-10 -9 -8 -7 -6 -5 -4 -3 -2 -1",
        "is_hidden": true
      },
      {
        "input": "3\n10 10 10\n4\n10 10 10 10",
        "output": "10 10 10 10 10 10 10",
        "is_hidden": true
      },
      {
        "input": "1\n50\n5\n-50 -40 -30 -20 -10",
        "output": "-50 -40 -30 -20 -10 50",
        "is_hidden": true
      },
      {
        "input": "2\n13 26\n4\n11 22 33 44",
        "output": "11 13 22 26 33 44",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 2 3 3\n5\n1 1 2 3 4",
        "output": "1 1 1 2 2 2 3 3 3 4",
        "is_hidden": true
      },
      {
        "input": "3\n-4 -2 0\n3\n-3 -1 1",
        "output": "-4 -3 -2 -1 0 1",
        "is_hidden": true
      },
      {
        "input": "2\n7 8\n3\n1 2 3",
        "output": "1 2 3 7 8",
        "is_hidden": true
      },
      {
        "input": "4\n10 20 30 40\n4\n5 15 25 35",
        "output": "5 10 15 20 25 30 35 40",
        "is_hidden": true
      },
      {
        "input": "1\n1\n1\n-1",
        "output": "-1 1",
        "is_hidden": true
      },
      {
        "input": "6\n-100 -80 -60 -40 -20 0\n1\n-100",
        "output": "-100 -100 -80 -60 -40 -20 0",
        "is_hidden": true
      },
      {
        "input": "3\n1 2 3\n3\n1 2 3",
        "output": "1 1 2 2 3 3",
        "is_hidden": true
      },
      {
        "input": "2\n2 4\n2\n2 4",
        "output": "2 2 4 4",
        "is_hidden": true
      },
      {
        "input": "4\n1 5 9 13\n4\n2 6 10 14",
        "output": "1 2 5 6 9 10 13 14",
        "is_hidden": true
      },
      {
        "input": "3\n-7 -3 1\n3\n-5 -1 3",
        "output": "-7 -5 -3 -1 1 3",
        "is_hidden": true
      },
      {
        "input": "5\n10 12 14 16 18\n2\n11 13",
        "output": "10 11 12 13 14 16 18",
        "is_hidden": true
      },
      {
        "input": "1\n-100\n1\n100",
        "output": "-100 100",
        "is_hidden": true
      },
      {
        "input": "2\n5 10\n5\n1 2 3 4 6",
        "output": "1 2 3 4 5 6 10",
        "is_hidden": true
      },
      {
        "input": "4\n1 1 2 2\n3\n1 2 3",
        "output": "1 1 1 2 2 2 3",
        "is_hidden": true
      },
      {
        "input": "3\n-9 -8 -7\n3\n-6 -5 -4",
        "output": "-9 -8 -7 -6 -5 -4",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 3 4 5\n5\n6 7 8 9 10",
        "output": "1 2 3 4 5 6 7 8 9 10",
        "is_hidden": true
      },
      {
        "input": "2\n20 30\n3\n1 10 15",
        "output": "1 10 15 20 30",
        "is_hidden": true
      },
      {
        "input": "1\n-1\n1\n-1",
        "output": "-1 -1",
        "is_hidden": true
      },
      {
        "input": "4\n1 3 5 7\n1\n4",
        "output": "1 3 4 5 7",
        "is_hidden": true
      },
      {
        "input": "3\n10 20 30\n3\n10 20 30",
        "output": "10 10 20 20 30 30",
        "is_hidden": true
      },
      {
        "input": "2\n-5 -5\n2\n-5 -5",
        "output": "-5 -5 -5 -5",
        "is_hidden": true
      },
      {
        "input": "6\n0 0 0 0 0 0\n2\n0 0",
        "output": "0 0 0 0 0 0 0 0",
        "is_hidden": true
      },
      {
        "input": "3\n-10 -20 -30\n1\n10",
        "output": "-10 -20 -30 10",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Maximum Subarray",
    "input": "The first line contains an integer `n`. The second line contains `n` integers representing `nums`.",
    "output": "An integer representing the largest subarray sum.",
    "description": "Given an integer array `nums`, find the subarray with the largest sum, and return its sum.",
    "difficulty": "easy",
    "categories": ["array", "dynamic-programming"],
    "examples": [
      {
        "input": "9\n-2 1 -3 4 -1 2 1 -5 4",
        "output": "6",
        "is_hidden": false
      },
      {
        "input": "5\n5 4 -1 7 8",
        "output": "23",
        "is_hidden": false
      }
    ],
    "constraints": ["1 <= n <= 1000"],
    "hints": [
      "This is a classic problem that can be solved with Kadane's Algorithm."
    ],
    "test_cases": [
      {
        "input": "9\n-2 1 -3 4 -1 2 1 -5 4",
        "output": "6",
        "is_hidden": false
      },
      {
        "input": "5\n5 4 -1 7 8",
        "output": "23",
        "is_hidden": false
      },
      {
        "input": "Of course. Here are the input and C++ solution files for the \"Maximum Subarray\" problem.",
        "output": "23",
        "is_hidden": true
      },
      {
        "input": "Input File: maximum_subarray.in\n9\n-2 1 -3 4 -1 2 1 -5 4",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "1\n1",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "1\n-1",
        "output": "55",
        "is_hidden": true
      },
      {
        "input": "2\n-2 -1",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "10\n1 2 3 4 5 6 7 8 9 10",
        "output": "12",
        "is_hidden": true
      },
      {
        "input": "10\n-1 -2 -3 -4 -5 -6 -7 -8 -9 -10",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "8\n-10 2 3 -5 8 -1 2 3",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "5\n1 -1 1 -1 1",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "3\n-2 1 -2",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "7\n1 2 -5 4 3 -1 2",
        "output": "18",
        "is_hidden": true
      },
      {
        "input": "6\n-1 -2 -3 0 -1 -2",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "4\n10 -1 9 -1",
        "output": "19",
        "is_hidden": true
      },
      {
        "input": "2\n5 -8",
        "output": "12",
        "is_hidden": true
      },
      {
        "input": "5\n-1 10 -1 10 -1",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "12\n2 -3 4 -1 5 -2 6 -3 1 2 -4 3",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "1\n0",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "3\n3 3 -5",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "5\n-5 -4 -3 -2 -1",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "6\n1 1 1 1 1 1",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "8\n-2 3 -1 4 -2 1 5 -3",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "4\n-5 1 2 3",
        "output": "18",
        "is_hidden": true
      },
      {
        "input": "3\n-1 -1 -1",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "7\n10 2 -15 3 4 5 6",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "5\n1 -2 3 -4 5",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "11\n1 -1 1 -1 1 -1 1 -1 1 -1 1",
        "output": "20",
        "is_hidden": true
      },
      {
        "input": "2\n-10 1",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "6\n-1 2 3 4 5 6",
        "output": "298",
        "is_hidden": true
      },
      {
        "input": "8\n-8 -7 -6 -5 -4 -3 -2 -1",
        "output": "199",
        "is_hidden": true
      },
      {
        "input": "5\n100 -1 100 -1 100",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "4\n-1 100 -1 100",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "3\n1 -100 1",
        "output": "-100",
        "is_hidden": true
      },
      {
        "input": "10\n-1 2 -3 4 -5 6 -7 8 -9 10",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "1\n-100",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "5\n-2 -3 -1 -5 -4",
        "output": "7",
        "is_hidden": true
      },
      {
        "input": "7\n3 4 -1 2 -5 6 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "8\n1 -2 3 -4 5 -6 7 -8",
        "output": "26",
        "is_hidden": true
      },
      {
        "input": "6\n-1 1 -1 1 -1 1",
        "output": "-5",
        "is_hidden": true
      },
      {
        "input": "4\n5 6 7 8",
        "output": "22",
        "is_hidden": true
      },
      {
        "input": "5\n-5 -6 -7 -8 -9",
        "output": "20",
        "is_hidden": true
      },
      {
        "input": "10\n1 2 -1 3 4 -2 5 6 -3 7",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "3\n-10 20 -5",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "7\n-3 -2 -1 0 1 2 3",
        "output": "11",
        "is_hidden": true
      },
      {
        "input": "9\n2 -1 2 -1 2 -1 2 -1 2",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "8\n-1 2 -1 3 -1 4 -1 5",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "5\n-10 -1 -10 -1 -10",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "6\n1 2 3 -10 4 5",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "4\n1 1 1 -5",
        "output": "12",
        "is_hidden": true
      },
      {
        "input": "3\n-3 2 1",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "12\n-1 -1 2 2 -3 -3 4 4 -5 -5 6 6",
        "output": "1000",
        "is_hidden": true
      },
      {
        "input": "2\n10 -1",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "1\n1000",
        "output": "",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Contains Duplicate",
    "input": "The first line contains an integer `n`. The second line contains `n` integers representing `nums`.",
    "output": "Output `YES` or `NO`.",
    "description": "Given an integer array `nums`, return `YES` if any value appears at least twice in the array, and `NO` if every element is distinct.",
    "difficulty": "easy",
    "categories": ["array", "hash-table"],
    "examples": [
      {
        "input": "4\n1 2 3 1",
        "output": "YES",
        "is_hidden": false
      },
      {
        "input": "4\n1 2 3 4",
        "output": "NO",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": ["A hash set is very efficient for this problem."],
    "test_cases": [
      {
        "input": "4\n1 2 3 1",
        "output": "YES",
        "is_hidden": false
      },
      {
        "input": "4\n1 2 3 4",
        "output": "NO",
        "is_hidden": false
      },
      {
        "input": "10\n1 1 1 3 3 4 3 2 4 2",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "1\n10",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "2\n5 5",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "2\n5 6",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "8\n-1 -2 -3 -4 -1 -5 -6 -7",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "7\n0 1 2 3 4 5 6",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "7\n0 1 2 0 4 5 6",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n10 20 30 40 10",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "6\n9 8 7 6 5 9",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "12\n1 2 3 4 5 6 7 8 9 10 11 1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "15\n-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "15\n-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n0 0 0 0 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "3\n-1 0 -1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "4\n-2 -1 0 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "6\n100 200 300 400 500 100",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "2\n-2147483648 2147483647",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "2\n2147483647 2147483647",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "9\n1 2 3 1 2 3 1 2 3",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "8\n10 20 30 40 50 60 70 80",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "8\n80 70 60 50 40 30 20 10",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "10\n0 1 -1 2 -2 3 -3 4 -4 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n5 4 3 2 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n1 1 2 3 4",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 2 3 4",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 3 3 4",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 3 4 4",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "6\n6 5 4 4 5 6",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "7\n-3 -2 -1 0 -1 -2 -3",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "4\n10 10 10 10",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "3\n1 2 1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "11\n1 2 3 4 5 6 7 8 9 10 1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "13\n-6 -5 -4 -3 -2 -1 0 1 2 3 4 5 -6",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "1\n0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "2\n0 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "10\n9 1 8 2 7 3 6 4 5 9",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "8\n-1 -1 -1 -1 -2 -2 -2 -2",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "6\n12 34 56 78 90 12",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "4\n1 1 2 2",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "7\n1 2 3 4 3 2 1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n-5 -5 -5 -5 -5",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "9\n10 9 8 7 6 5 4 3 2",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "9\n2 3 4 5 6 7 8 9 2",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "10\n-5 -4 -3 -2 -1 0 1 2 3 4",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "10\n-5 -4 -3 -2 -1 0 1 2 3 -5",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "3\n100 1000 100",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "6\n-10 20 -30 40 -50 20",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 3 2 1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "4\n4 3 2 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "2\n-10 -10",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "3\n0 1 0",
        "output": "YES",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Product of Array Except Self",
    "input": "The first line contains an integer `n`. The second line contains `n` integers representing `nums`.",
    "output": "A single line of space-separated integers representing the answer array.",
    "description": "Given an integer array `nums` of length `n`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`.",
    "difficulty": "medium",
    "categories": ["array"],
    "examples": [
      {
        "input": "4\n1 2 3 4",
        "output": "24 12 8 6",
        "is_hidden": false
      },
      {
        "input": "5\n-1 1 0 -3 3",
        "output": "0 0 9 0 0",
        "is_hidden": false
      }
    ],
    "constraints": [
      "You must write an algorithm that runs in O(n) time and without using the division operation."
    ],
    "hints": ["Try computing prefix products and suffix products first."],
    "test_cases": [
      {
        "input": "4\n1 2 3 4",
        "output": "24 12 8 6",
        "is_hidden": false
      },
      {
        "input": "5\n-1 1 0 -3 3",
        "output": "0 0 9 0 0",
        "is_hidden": false
      },
      {
        "input": "2\n10 0",
        "output": "0 10",
        "is_hidden": true
      },
      {
        "input": "3\n2 3 5",
        "output": "15 10 6",
        "is_hidden": true
      },
      {
        "input": "5\n1 1 1 1 1",
        "output": "1 1 1 1 1",
        "is_hidden": true
      },
      {
        "input": "5\n-1 -1 -1 -1 -1",
        "output": "1 1 1 1 1",
        "is_hidden": true
      },
      {
        "input": "6\n1 2 0 0 5 6",
        "output": "0 0 0 0 0 0",
        "is_hidden": true
      },
      {
        "input": "4\n-2 -3 -4 -5",
        "output": "-60 -40 -30 -24",
        "is_hidden": true
      },
      {
        "input": "3\n10 20 30",
        "output": "600 300 200",
        "is_hidden": true
      },
      {
        "input": "7\n1 2 3 4 5 6 7",
        "output": "5040 2520 1680 1260 1008 840 720",
        "is_hidden": true
      },
      {
        "input": "2\n-5 5",
        "output": "5 -5",
        "is_hidden": true
      },
      {
        "input": "10\n1 1 1 1 0 1 1 1 1 1",
        "output": "0 0 0 0 1 0 0 0 0 0",
        "is_hidden": true
      },
      {
        "input": "8\n2 2 2 2 2 2 2 2",
        "output": "128 128 128 128 128 128 128 128",
        "is_hidden": true
      },
      {
        "input": "5\n-1 2 -3 4 -5",
        "output": "120 -60 40 -30 24",
        "is_hidden": true
      },
      {
        "input": "6\n1 0 3 0 5 0",
        "output": "0 0 0 0 0 0",
        "is_hidden": true
      },
      {
        "input": "4\n100 200 300 400",
        "output": "24000000 12000000 8000000 6000000",
        "is_hidden": true
      },
      {
        "input": "3\n-10 -10 -10",
        "output": "100 100 100",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 1 2 1",
        "output": "4 2 4 2 4",
        "is_hidden": true
      },
      {
        "input": "7\n-1 -1 2 2 -3 -3 0",
        "output": "0 0 0 0 0 0 36",
        "is_hidden": true
      },
      {
        "input": "2\n1 1",
        "output": "1 1",
        "is_hidden": true
      },
      {
        "input": "9\n1 2 3 4 5 4 3 2 1",
        "output": "2880 1440 960 720 576 720 960 1440 2880",
        "is_hidden": true
      },
      {
        "input": "4\n-1 -1 -1 1",
        "output": "1 1 1 -1",
        "is_hidden": true
      },
      {
        "input": "5\n0 1 2 3 4",
        "output": "24 0 0 0 0",
        "is_hidden": true
      },
      {
        "input": "6\n5 4 3 2 1 0",
        "output": "0 0 0 0 0 120",
        "is_hidden": true
      },
      {
        "input": "3\n7 7 7",
        "output": "49 49 49",
        "is_hidden": true
      },
      {
        "input": "8\n-1 1 -1 1 -1 1 -1 1",
        "output": "-1 1 -1 1 -1 1 -1 1",
        "is_hidden": true
      },
      {
        "input": "4\n1 1 1 0",
        "output": "0 0 0 1",
        "is_hidden": true
      },
      {
        "input": "5\n2 4 6 8 10",
        "output": "1920 960 640 480 384",
        "is_hidden": true
      },
      {
        "input": "6\n-2 -4 -6 -8 -10 -12",
        "output": "-23040 -11520 -7680 -5760 -4608 -3840",
        "is_hidden": true
      },
      {
        "input": "3\n-5 0 5",
        "output": "0 -25 0",
        "is_hidden": true
      },
      {
        "input": "7\n1 10 100 1000 100 10 1",
        "output": "1000000000 100000000 10000000 1000000 10000000 100000000 1000000000",
        "is_hidden": true
      },
      {
        "input": "2\n-1 -1",
        "output": "-1 -1",
        "is_hidden": true
      },
      {
        "input": "10\n1 2 3 4 5 -5 -4 -3 -2 -1",
        "output": "-14400 -7200 -4800 -3600 -2880 2880 3600 4800 7200 14400",
        "is_hidden": true
      },
      {
        "input": "5\n1 0 1 0 1",
        "output": "0 0 0 0 0",
        "is_hidden": true
      },
      {
        "input": "4\n-3 2 -4 5",
        "output": "-40 60 -30 24",
        "is_hidden": true
      },
      {
        "input": "3\n0 0 0",
        "output": "0 0 0",
        "is_hidden": true
      },
      {
        "input": "6\n10 1 1 1 1 10",
        "output": "10 100 100 100 100 10",
        "is_hidden": true
      },
      {
        "input": "5\n-2 3 -4 5 -6",
        "output": "360 -240 180 -144 120",
        "is_hidden": true
      },
      {
        "input": "4\n1 1 1 1",
        "output": "1 1 1 1",
        "is_hidden": true
      },
      {
        "input": "7\n1 2 0 3 4 0 5",
        "output": "0 0 0 0 0 0 0",
        "is_hidden": true
      },
      {
        "input": "2\n7 8",
        "output": "8 7",
        "is_hidden": true
      },
      {
        "input": "8\n-2 1 -2 1 -2 1 -2 1",
        "output": "-8 16 -8 16 -8 16 -8 16",
        "is_hidden": true
      },
      {
        "input": "5\n0 0 1 1 1",
        "output": "0 0 0 0 0",
        "is_hidden": true
      },
      {
        "input": "6\n-10 1 -10 1 -10 1",
        "output": "100 -1000 100 -1000 100 -1000",
        "is_hidden": true
      },
      {
        "input": "3\n-1 2 -1",
        "output": "-2 1 -2",
        "is_hidden": true
      },
      {
        "input": "9\n1 1 2 2 3 3 4 4 0",
        "output": "0 0 0 0 0 0 0 0 576",
        "is_hidden": true
      },
      {
        "input": "4\n-1 0 1 2",
        "output": "0 -2 0 0",
        "is_hidden": true
      },
      {
        "input": "5\n10 20 0 40 50",
        "output": "0 0 400000 0 0",
        "is_hidden": true
      },
      {
        "input": "7\n-2 -2 -2 -2 -2 -2 -2",
        "output": "64 64 64 64 64 64 64",
        "is_hidden": true
      },
      {
        "input": "3\n1 2 0",
        "output": "0 0 2",
        "is_hidden": true
      },
      {
        "input": "8\n1 2 3 4 0 5 6 7",
        "output": "0 0 0 0 5040 0 0 0",
        "is_hidden": true
      },
      {
        "input": "2\n100 -100",
        "output": "-100 100",
        "is_hidden": true
      },
      {
        "input": "6\n1 -1 2 -2 3 -3",
        "output": "-36 36 -18 18 -12 12",
        "is_hidden": true
      },
      {
        "input": "5\n-1 0 -1 0 -1",
        "output": "0 0 0 0 0",
        "is_hidden": true
      },
      {
        "input": "4\n-10 20 -30 40",
        "output": "-24000 12000 -8000 6000",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Validate Binary Search Tree",
    "input": "The first line contains an integer `n`, the number of nodes. The second line contains `n` space-separated values representing the tree in level-order, with `null` for empty nodes.",
    "output": "Output `YES` if it's a valid BST, otherwise `NO`.",
    "description": "Given the root of a binary tree, determine if it is a valid binary search tree (BST).\nA valid BST is defined as follows:\n- The left subtree of a node contains only nodes with keys less than the node's key.\n- The right subtree of a node contains only nodes with keys greater than the node's key.\n- Both the left and right subtrees must also be binary search trees.",
    "difficulty": "medium",
    "categories": ["tree", "binary-search"],
    "examples": [
      {
        "input": "3\n2 1 3",
        "output": "YES",
        "is_hidden": false
      },
      {
        "input": "5\n5 1 4 null null 3 6",
        "output": "NO",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [
      "You need to check more than just `root.left.val < root.val`. The entire left subtree must be smaller."
    ],
    "test_cases": [
      {
        "input": "3\n2 1 3",
        "output": "YES",
        "is_hidden": false
      },
      {
        "input": "5\n5 1 4 null null 3 6",
        "output": "NO",
        "is_hidden": false
      },
      {
        "input": "1\n1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "2\n1 2",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "2\n2 1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "7\n10 5 15 null null 6 20",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "7\n10 5 15 3 7 12 18",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "1\n0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n5 3 7 1 4",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n5 3 7 2 8",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "3\n1 1 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n10 5 15 null 20",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "4\n1 2 3 4",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n20 10 30 5 15",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n20 10 30 5 25",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "1\n-2147483648",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "3\n0 -1 1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "7\n32 26 47 null 35 34 50",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n5 1 7 null null 6",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "4\n10 5 null 15",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "6\n10 5 15 2 null 12",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "7\n50 30 70 20 40 60 80",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "7\n50 30 70 20 60 40 80",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "3\n3 2 null 1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n10 8 12 7 9",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n10 8 12 7 11",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "3\n10 null 5",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n10 5 15 5 12",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n10 5 15 3 7",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n10 5 15 12 20",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n1 1 null 2",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n2 1 null 3",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "7\n-10 -20 0 null null -5 5",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "7\n-10 -20 0 -30 -15 null null",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n10 10 10 null null",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "3\n5 5 5",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n10 5 null 15 12",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "6\n10 5 15 null 7 12",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "7\n100 50 150 25 75 125 175",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "7\n100 50 150 25 125 75 175",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "3\n0 null -1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n20 10 null 30 25",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n20 null 30 10 25",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "4\n5 3 7 1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n5 3 7 4 6",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5\n10 5 15 1 6",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n10 5 15 1 11",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "3\n100 20 200",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n100 20 200 null 30",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5\n100 20 200 10 null",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "7\n4 2 6 1 3 5 7",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "7\n4 2 6 1 5 3 7",
        "output": "NO",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Coin Change",
    "input": "The first line contains two integers `n` (number of coin types) and `amount`. The second line contains `n` integers representing the coin denominations.",
    "output": "The minimum number of coins required, or -1 if not possible.",
    "description": "You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.",
    "difficulty": "medium",
    "categories": ["dynamic-programming", "array"],
    "examples": [
      {
        "input": "3 11\n1 2 5",
        "output": "3",
        "is_hidden": false
      },
      {
        "input": "1 3\n2",
        "output": "-1",
        "is_hidden": false
      }
    ],
    "constraints": [
      "You may assume that you have an infinite number of each kind of coin."
    ],
    "hints": [
      "This is a classic dynamic programming problem. Think about the subproblems."
    ],
    "test_cases": [
      {
        "input": "3 11\n1 2 5",
        "output": "3",
        "is_hidden": false
      },
      {
        "input": "1 3\n2",
        "output": "-1",
        "is_hidden": false
      },
      {
        "input": "1 0\n1",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "2 7\n5 3",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "4 6\n1 3 4 5",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "1 100\n1",
        "output": "100",
        "is_hidden": true
      },
      {
        "input": "5 8\n1 2 5 6 7",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 7\n2 4 6",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "10 99\n1 2 5 10 20 25 50 60 80 90",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "2 1\n2 3",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "4 27\n2 5 10 25",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 6\n1 4 5",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "1 1000\n999",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "5 32\n1 5 10 15 20",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "2 30\n15 25",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 13\n1 4 6 9",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 10\n2 5 10",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "1 1\n2",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "5 17\n1 2 5 8 9",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 4\n1 2 3",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 20\n1 5 7 11",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "2 50\n25 10",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "6 100\n1 5 10 25 50 100",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "3 1\n2 3 4",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "4 18\n2 3 7 12",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "2 9\n4 5",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "5 49\n1 5 10 21 25",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "3 14\n3 5 7",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "1 5\n1",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "4 99\n10 20 30 40",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "2 6\n3 3",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "5 1\n2 3 4 5 6",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "6 63\n1 5 10 21 25 50",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "3 16\n4 5 8",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "2 100\n1 99",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 15\n2 4 6 8",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "3 12\n1 5 12",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "5 33\n2 3 5 7 11",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "1 2\n1",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 19\n1 3 8 10",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "2 7\n1 6",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "5 23\n1 2 5 10 11",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "3 30\n5 10 25",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "1 8\n3",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "4 41\n1 5 10 20",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "2 2\n3 5",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "5 50\n2 5 10 20 25",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 9\n2 4 5",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "4 8\n1 3 5 7",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "2 10\n6 7",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "6 20\n1 2 5 8 10 11",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "3 22\n1 10 11",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "1 9\n10",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "4 35\n5 7 10 15",
        "output": "3",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Rotate Image",
    "input": "The first line contains `n`. The next `n` lines each contain `n` integers representing the matrix.",
    "output": "The rotated `n x n` matrix, with each row on a new line.",
    "description": "You are given an `n x n` 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.",
    "difficulty": "medium",
    "categories": ["array"],
    "examples": [
      {
        "input": "3\n1 2 3\n4 5 6\n7 8 9",
        "output": "7 4 1\n8 5 2\n9 6 3",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [
      "A common approach is to first transpose the matrix and then reverse each row."
    ],
    "test_cases": [
      {
        "input": "3\n1 2 3\n4 5 6\n7 8 9",
        "output": "7 4 1\n8 5 2\n9 6 3",
        "is_hidden": false
      },
      {
        "input": "4\n5 1 9 11\n2 4 8 10\n13 3 6 7\n15 14 12 16",
        "output": "15 13 2 5\n14 3 4 1\n12 6 8 9\n16 7 10 11",
        "is_hidden": true
      },
      {
        "input": "1\n1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "2\n1 2\n3 4",
        "output": "3 1\n4 2",
        "is_hidden": true
      },
      {
        "input": "2\n-1 -2\n-3 -4",
        "output": "-3 -1\n-4 -2",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 3 4 5\n6 7 8 9 10\n11 12 13 14 15\n16 17 18 19 20\n21 22 23 24 25",
        "output": "21 16 11 6 1\n22 17 12 7 2\n23 18 13 8 3\n24 19 14 9 4\n25 20 15 10 5",
        "is_hidden": true
      },
      {
        "input": "3\n0 0 0\n0 0 0\n0 0 0",
        "output": "0 0 0\n0 0 0\n0 0 0",
        "is_hidden": true
      },
      {
        "input": "4\n-1 2 -3 4\n5 -6 7 -8\n-9 10 -11 12\n13 -14 15 -16",
        "output": "13 -9 5 -1\n-14 10 -6 2\n15 -11 7 -3\n-16 12 -8 4",
        "is_hidden": true
      },
      {
        "input": "3\n10 20 30\n40 50 60\n70 80 90",
        "output": "70 40 10\n80 50 20\n90 60 30",
        "is_hidden": true
      },
      {
        "input": "5\n1 1 1 1 1\n2 2 2 2 2\n3 3 3 3 3\n4 4 4 4 4\n5 5 5 5 5",
        "output": "5 4 3 2 1\n5 4 3 2 1\n5 4 3 2 1\n5 4 3 2 1\n5 4 3 2 1",
        "is_hidden": true
      },
      {
        "input": "2\n100 200\n300 400",
        "output": "300 100\n400 200",
        "is_hidden": true
      },
      {
        "input": "4\n1 0 0 0\n0 1 0 0\n0 0 1 0\n0 0 0 1",
        "output": "0 0 0 1\n0 0 1 0\n0 1 0 0\n1 0 0 0",
        "is_hidden": true
      },
      {
        "input": "3\n-9 -8 -7\n-6 -5 -4\n-3 -2 -1",
        "output": "-3 -6 -9\n-2 -5 -8\n-1 -4 -7",
        "is_hidden": true
      },
      {
        "input": "6\n1 2 3 4 5 6\n7 8 9 10 11 12\n13 14 15 16 17 18\n19 20 21 22 23 24\n25 26 27 28 29 30\n31 32 33 34 35 36",
        "output": "31 25 19 13 7 1\n32 26 20 14 8 2\n33 27 21 15 9 3\n34 28 22 16 10 4\n35 29 23 17 11 5\n36 30 24 18 12 6",
        "is_hidden": true
      },
      {
        "input": "2\n0 1\n1 0",
        "output": "1 0\n0 1",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Longest Increasing Subsequence",
    "input": "The first line contains an integer `n`. The second line contains `n` integers representing `nums`.",
    "output": "A single integer for the length of the LIS.",
    "description": "Given an integer array `nums`, return the length of the longest strictly increasing subsequence.",
    "difficulty": "medium",
    "categories": ["array", "dynamic-programming", "binary-search"],
    "examples": [
      {
        "input": "8\n10 9 2 5 3 7 101 18",
        "output": "4",
        "is_hidden": false
      },
      {
        "input": "7\n0 1 0 3 2 3",
        "output": "4",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [
      "There is an O(n^2) DP solution and a more clever O(n log n) solution."
    ],
    "test_cases": [
      {
        "input": "8\n10 9 2 5 3 7 101 18",
        "output": "4",
        "is_hidden": false
      },
      {
        "input": "7\n0 1 0 3 2 3",
        "output": "4",
        "is_hidden": false
      },
      {
        "input": "1\n7",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 3 4 5",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "5\n5 4 3 2 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "10\n3 10 2 1 1 20 2 3 4 5",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "10\n1 1 1 1 1 1 1 1 1 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "12\n-1 0 1 2 3 -2 -1 0 4 5 6 7",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "6\n3 4 -1 0 6 2",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "15\n8 9 10 1 2 3 11 12 13 4 5 6 14 15 16",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "1\n-100",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "4\n-5 -4 -3 -2",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "4\n-2 -3 -4 -5",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "11\n4 10 4 3 8 9 1 2 3 4 5",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "10\n2 5 1 8 3 9 4 7 6 10",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "13\n-7 10 9 2 3 8 8 1 2 3 4 5 6",
        "output": "7",
        "is_hidden": true
      },
      {
        "input": "14\n1 2 3 4 5 6 7 1 2 3 4 5 6 7",
        "output": "7",
        "is_hidden": true
      },
      {
        "input": "5\n10 20 30 5 15",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "9\n2 1 5 3 6 4 8 9 7",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "8\n5 6 7 8 1 2 3 4",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "10\n3 1 4 1 5 9 2 6 5 3",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "12\n10 22 9 33 21 50 41 60 80 20 25 35",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "7\n1 2 1 2 1 2 1",
        "output": "2",
        "is_hidden": true
      },
      {
        "input": "6\n10 9 8 7 6 5",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "10\n1 1 2 2 3 3 4 4 5 5",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "8\n-10 -5 0 5 10 15 20 25",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "8\n25 20 15 10 5 0 -5 -10",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "9\n1 2 3 2 1 4 5 6 5",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "1\n0",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "16\n10 20 30 40 50 60 70 80 1 2 3 4 5 6 7 8",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "11\n1 3 6 7 9 4 10 5 6 7 8",
        "output": "7",
        "is_hidden": true
      },
      {
        "input": "10\n-2 -1 0 1 2 3 2 1 0 -1",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "12\n1 1 1 2 2 2 3 3 3 4 4 4",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "10\n10 9 2 5 3 7 101 18 1 1",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "13\n0 1 2 3 4 5 6 7 8 9 10 11 12",
        "output": "13",
        "is_hidden": true
      },
      {
        "input": "13\n12 11 10 9 8 7 6 5 4 3 2 1 0",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "7\n7 7 7 7 7 7 7",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "8\n1 2 4 8 16 32 64 128",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "10\n10 1 9 2 8 3 7 4 6 5",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "14\n3 1 4 1 5 9 2 6 5 3 5 8 9 7",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "15\n1 2 3 2 3 4 3 4 5 4 5 6 5 6 7",
        "output": "7",
        "is_hidden": true
      },
      {
        "input": "11\n-5 -4 -3 -2 -1 0 1 2 3 4 5",
        "output": "11",
        "is_hidden": true
      },
      {
        "input": "9\n5 3 4 4 2 8 6 7 1",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "10\n-10 1 -9 2 -8 3 -7 4 -6 5",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "12\n1 2 3 4 3 2 1 5 6 7 8 9",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "10\n1 2 3 4 5 5 4 3 2 1",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "11\n1 2 3 4 5 0 6 7 8 9 10",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "10\n100 99 98 97 96 1 2 3 4 5",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "12\n1 2 3 1 2 3 1 2 3 1 2 3",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "10\n4 5 6 1 2 3 7 8 9 0",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "13\n1 10 2 9 3 8 4 7 5 6 0 11 12",
        "output": "8",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Word Break",
    "input": "The first line contains the string `s`. The second line contains an integer `n` for the number of words in the dictionary. The next `n` lines contain the dictionary words.",
    "output": "Output `YES` or `NO`.",
    "description": "Given a string `s` and a dictionary of strings `wordDict`, return `YES` if `s` can be segmented into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation.",
    "difficulty": "medium",
    "categories": ["dynamic-programming", "hash-table", "string"],
    "examples": [
      {
        "input": "leetcode\n2\nleet\ncode",
        "output": "YES",
        "is_hidden": false
      },
      {
        "input": "applepenapple\n2\naapl\npen",
        "output": "NO",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [
      "Use dynamic programming where `dp[i]` represents if the prefix of `s` of length `i` can be segmented."
    ],
    "test_cases": [
      {
        "input": "leetcode\n2\nleet\ncode",
        "output": "YES",
        "is_hidden": false
      },
      {
        "input": "applepenapple\n2\naapl\npen",
        "output": "NO",
        "is_hidden": false
      },
      {
        "input": "applepenapple\n3\napple\npen\napplepen",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "catsandog\n5\ncats\ndog\nsand\nand\ncat",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "aaaaaaa\n2\naaaa\naaa",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "bb\n2\na\nb",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "helloworld\n2\nhello\nworld",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "program\n3\npro\ngram\nog",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "ab\n2\na\nb",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "ccac\n3\nc\nca\nac",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\n1\na",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "cars\n2\ncar\nrs",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "pineapplepen\n2\npineapple\npen",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "applepenapple\n2\napple\npen",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "catsanddog\n5\ncats\nsand\ndog\nand\ncat",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "iamace\n3\ni\nam\nace",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "abacaba\n2\nabac\naba",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "algorithm\n2\nalgo\nrithm",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "longstringtest\n3\nlong\nstring\ntest",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "anotherone\n2\nanother\none",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "foobar\n3\nfoo\nbar\nbaz",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "codingisfun\n3\ncoding\nis\nfun",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "mississippi\n4\nmiss\nissi\nssippi\npi",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "hellouniverse\n2\nhello\nuniverse",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "abracadabra\n3\nabra\ncad\ndabra",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "x\n1\ny",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "empty\n0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "testcase\n2\ntest\ncase",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "whataboutthis\n3\nwhat\nabout\nthis",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "recursivedp\n2\nrecursive\ndp",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "dynamicprogramming\n2\ndynamic\nprogramming",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "nospace\n1\nnospace",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "multiplewordsinoneline\n3\nmultiple\nwords\ninoneline",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "thequickbrownfox\n3\nthe\nquick\nbrownfox",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "jumpsoverthelazydog\n3\njumps\nover\nthelazydog",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "itworks\n2\nit\nworks",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "thisisatest\n3\nthis\nis\natest",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "anothertestcase\n3\nanother\ntest\ncase",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "yetanothertest\n3\nyet\nanother\ntest",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "short\n1\nshort",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "longword\n2\nlong\nword",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "wordbreakproblem\n3\nword\nbreak\nproblem",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "aaaa\n2\na\naa",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "bbbb\n2\nb\nbb",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "ccccc\n2\nc\ncc",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "ddddd\n1\nd",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "eeeee\n2\ne\nee",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "fffff\n1\nf",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "ggggg\n2\ng\ngg",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "hhhhh\n1\nh",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "iiiii\n2\ni\nii",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "jjjjj\n1\nj",
        "output": "YES",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Combination Sum",
    "input": "The first line contains `n` and `target`. The second line contains `n` integers for `candidates`.",
    "output": "Each line should be a unique combination of space-separated integers.",
    "description": "Given an array of distinct integers `candidates` and a target integer `target`, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. You may return the combinations in any order. The same number may be chosen from `candidates` an unlimited number of times.",
    "difficulty": "medium",
    "categories": ["array", "graph"],
    "examples": [
      {
        "input": "4 7\n2 3 6 7",
        "output": "2 2 3\n7",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [
      "Backtracking is a suitable approach for finding all combinations."
    ],
    "test_cases": [
      {
        "input": "4 7\n2 3 6 7",
        "output": "2 2 3\n7",
        "is_hidden": false
      },
      {
        "input": "3 8\n2 3 5",
        "output": "2 2 2 2\n2 3 3\n3 5",
        "is_hidden": true
      },
      {
        "input": "1 1\n2",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "2 1\n2 3",
        "output": "2 2 2 3\n2 3 4\n3 3 3",
        "is_hidden": true
      },
      {
        "input": "3 9\n2 3 4",
        "output": "\n2 2 2 2 2 2\n2 2 2 2 4\n2 2 2 3 3\n2 2 2 6\n2 2 3 5\n2 2 4 4\n2 3 3 4\n2 4 6\n2 5 5\n3 3 3 3\n3 3 6\n3 4 5\n4 4 4\n6 6",
        "is_hidden": true
      },
      {
        "input": "4 1\n2 3 4 5",
        "output": "2 2 3",
        "is_hidden": true
      },
      {
        "input": "5 12\n2 3 4 5 6",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "2 7\n2 3",
        "output": "\n5",
        "is_hidden": true
      },
      {
        "input": "3 1\n1 2 3",
        "output": "2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 4\n2 2 2 2 2 2 2 6\n2 2 2 2 2 2 4 4\n2 2 2 2 2 2 8\n2 2 2 2 2 4 6\n2 2 2 2 2 10\n2 2 2 2 4 4 4\n2 2 2 2 4 8\n2 2 2 2 6 6\n2 2 2 2 12\n2 2 2 4 4 6\n2 2 2 4 10\n2 2 2 6 8\n2 2 4 4 4 4\n2 2 4 4 8\n2 2 4 6 6\n2 2 4 12\n2 2 6 10\n2 2 8 8\n2 4 4 4 6\n2 4 4 10\n2 4 6 8\n2 6 6 6\n2 6 12\n2 8 10\n4 4 4 4 4\n4 4 4 8\n4 4 6 6\n4 4 12\n4 6 10\n4 8 8\n6 6 8\n8 12\n10 10",
        "is_hidden": true
      },
      {
        "input": "4 15\n2 4 6 8",
        "output": "2 3",
        "is_hidden": true
      },
      {
        "input": "1 5\n5",
        "output": "10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 20\n10 10 10 10 10 10 10 30\n10 10 10 10 10 10 20 20\n10 10 10 10 10 20 30\n10 10 10 10 20 20 20\n10 10 10 10 30 30\n10 10 10 20 20 30\n10 10 20 20 20 20\n10 10 20 30 30\n10 20 20 20 30\n10 30 30 30\n20 20 20 20 20\n20 20 30 30",
        "is_hidden": true
      },
      {
        "input": "6 20\n2 4 6 8 10 12",
        "output": "\n2 2 2 2 2\n2 2 3 3\n2 3 5\n2 8\n3 7\n5 5",
        "is_hidden": true
      },
      {
        "input": "2 5\n2 3",
        "output": "3 3 3 3 3 3\n3 3 3 3 6\n3 3 6 6\n6 6 6",
        "is_hidden": true
      },
      {
        "input": "3 100\n10 20 30",
        "output": "3 3 3 4\n3 5 5\n4 4 5",
        "is_hidden": true
      },
      {
        "input": "4 3\n4 5 6 7",
        "output": "5 5 5 5 5\n5 5 5 10\n5 5 15\n5 10 10\n5 20\n10 15",
        "is_hidden": true
      },
      {
        "input": "5 10\n2 3 5 7 8",
        "output": "\n2 2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 4\n2 2 2 2 2 2 2 4 4\n2 2 2 2 2 2 2 8\n2 2 2 2 2 2 5 5\n2 2 2 2 2 2 10\n2 2 2 2 2 4 4 4\n2 2 2 2 2 4 8\n2 2 2 2 4 5 5\n2 2 2 2 4 10\n2 2 2 4 4 4 4\n2 2 2 4 4 8\n2 2 2 8 8\n2 2 4 4 5 5\n2 2 4 4 10\n2 2 5 5 8\n2 2 8 10\n2 4 4 4 4 4\n2 4 4 4 8\n2 4 8 8\n2 5 5 5 5\n2 5 5 10\n2 10 10\n4 4 4 5 5\n4 4 4 10\n4 5 5 8\n4 8 10",
        "is_hidden": true
      },
      {
        "input": "2 18\n3 6",
        "output": "2 2 2\n2 4",
        "is_hidden": true
      },
      {
        "input": "3 13\n3 4 5",
        "output": "\n2 2 2 2 2 2 2 2\n2 2 2 2 2 2 4\n2 2 2 2 4 4\n2 2 2 2 8\n2 2 4 4 4\n2 2 4 8\n4 4 4 4\n4 4 8\n8 8\n16",
        "is_hidden": true
      },
      {
        "input": "4 25\n5 10 15 20",
        "output": "\n3 3 3 3 3 3 3 3 3 3\n3 3 3 3 3 3 3 3 6\n3 3 3 3 3 3 3 9\n3 3 3 3 3 3 6 6\n3 3 3 3 3 3 12\n3 3 3 3 3 6 9\n3 3 3 3 3 15\n3 3 3 3 6 6 6\n3 3 3 3 6 12\n3 3 3 3 9 9\n3 3 3 6 6 9\n3 3 3 6 15\n3 3 3 9 12\n3 3 6 6 6 6\n3 3 6 6 12\n3 3 6 9 9\n3 3 9 15\n3 3 12 12\n3 6 6 6 9\n3 6 6 15\n3 6 9 12\n3 9 9 9\n3 12 15\n6 6 6 6 6\n6 6 6 12\n6 6 9 9\n6 9 15\n6 12 12\n9 9 12\n15 15",
        "is_hidden": true
      },
      {
        "input": "1 10\n3",
        "output": "3 7",
        "is_hidden": true
      },
      {
        "input": "5 22\n2 4 5 8 10",
        "output": "\n3 3 3 5\n5 9\n7 7",
        "is_hidden": true
      },
      {
        "input": "2 6\n2 4",
        "output": "4 4",
        "is_hidden": true
      },
      {
        "input": "3 11\n2 4 6",
        "output": "8 8 8 8 8\n8 8 12 12\n8 10 10 12\n8 12 20\n10 10 10 10\n10 10 20\n10 15 15\n20 20",
        "is_hidden": true
      },
      {
        "input": "4 16\n2 4 8 16",
        "output": "5 7",
        "is_hidden": true
      },
      {
        "input": "1 99\n10",
        "output": "7 7 7\n7 14\n21",
        "is_hidden": true
      },
      {
        "input": "5 30\n3 6 9 12 15",
        "output": "10 10 10 10 10\n10 10 10 20\n10 10 30\n10 20 20\n20 30\n25 25",
        "is_hidden": true
      },
      {
        "input": "2 10\n3 7",
        "output": "\n5 5 5 5 5 5 5\n5 5 5 5 5 10\n5 5 5 5 15\n5 5 5 10 10\n5 5 5 20\n5 5 10 15\n5 5 25\n5 10 10 10\n5 10 20\n5 15 15\n10 10 15\n10 25\n15 20",
        "is_hidden": true
      },
      {
        "input": "3 17\n4 6 8",
        "output": "25 25 25 25\n25 25 50\n50 50",
        "is_hidden": true
      },
      {
        "input": "4 14\n3 5 7 9",
        "output": "5 7 11",
        "is_hidden": true
      },
      {
        "input": "1 8\n4",
        "output": "2 2 2 2 2 2 2 5\n2 2 2 2 11\n2 2 2 5 8\n2 2 5 5 5\n8 11",
        "is_hidden": true
      },
      {
        "input": "5 40\n8 10 12 15 20",
        "output": "\n4 4 4 4 4 4 4\n4 4 4 4 4 8\n4 4 4 4 12\n4 4 4 8 8\n4 4 4 16\n4 4 8 12\n4 4 20\n4 8 8 8\n4 8 16\n4 12 12\n8 8 12\n8 20\n12 16",
        "is_hidden": true
      },
      {
        "input": "2 12\n5 7",
        "output": "6 8",
        "is_hidden": true
      },
      {
        "input": "3 21\n7 14 21",
        "output": "11 11 11\n11 22\n33",
        "is_hidden": true
      },
      {
        "input": "4 50\n10 20 25 30",
        "output": "10 10 10 10 10 10\n10 10 10 10 20\n10 10 10 30\n10 10 20 20\n10 10 40\n10 20 30\n20 20 20\n20 40\n30 30",
        "is_hidden": true
      },
      {
        "input": "1 100\n101",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "5 35\n5 10 15 20 25",
        "output": "3 3 3 3 3 3 3 3 3\n3 3 3 3 3 3 3 6\n3 3 3 3 3 3 9\n3 3 3 3 3 6 6\n3 3 3 3 3 12\n3 3 3 3 6 9\n3 3 3 3 15\n3 3 3 6 6 6\n3 3 3 6 12\n3 3 3 9 9\n3 3 6 6 9\n3 3 6 15\n3 3 9 12\n3 6 6 6 6\n3 6 6 12\n3 6 9 9\n3 9 15\n3 12 12\n6 6 6 9\n6 6 15\n6 9 12\n9 9 9\n12 15",
        "is_hidden": true
      },
      {
        "input": "2 100\n50 25",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "3 23\n5 7 11",
        "output": "1 1 1 1 1\n1 1 1 2\n1 1 3\n1 2 2\n2 3",
        "is_hidden": true
      },
      {
        "input": "4 19\n2 5 8 11",
        "output": "1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 2\n1 1 1 1 1 1 1 3\n1 1 1 1 1 1 2 2\n1 1 1 1 1 1 4\n1 1 1 1 1 2 3\n1 1 1 1 2 2 2\n1 1 1 1 2 4\n1 1 1 1 3 3\n1 1 1 2 2 3\n1 1 1 3 4\n1 1 2 2 2 2\n1 1 2 2 4\n1 1 2 3 3\n1 1 4 4\n1 2 2 2 3\n1 2 3 4\n1 3 3 3\n2 2 2 2 2\n2 2 2 4\n2 2 3 3\n2 4 4\n3 3 4",
        "is_hidden": true
      },
      {
        "input": "1 4\n5",
        "output": "1 1 1 1 1 1 1 1 1 1",
        "is_hidden": true
      },
      {
        "input": "5 28\n4 8 12 16 20",
        "output": "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 2\n1 1 1 1 1 1 1 1 1 1 1 1 3\n1 1 1 1 1 1 1 1 1 1 1 2 2\n1 1 1 1 1 1 1 1 1 1 1 4\n1 1 1 1 1 1 1 1 1 1 2 3\n1 1 1 1 1 1 1 1 1 1 5\n1 1 1 1 1 1 1 1 1 2 2 2\n1 1 1 1 1 1 1 1 1 2 4\n1 1 1 1 1 1 1 1 1 3 3\n1 1 1 1 1 1 1 1 2 2 3\n1 1 1 1 1 1 1 1 2 5\n1 1 1 1 1 1 1 1 3 4\n1 1 1 1 1 1 1 2 2 2 2\n1 1 1 1 1 1 1 2 2 4\n1 1 1 1 1 1 1 2 3 3\n1 1 1 1 1 1 1 3 5\n1 1 1 1 1 1 1 4 4\n1 1 1 1 1 1 2 2 2 3\n1 1 1 1 1 1 2 2 5\n1 1 1 1 1 1 2 3 4\n1 1 1 1 1 1 3 3 3\n1 1 1 1 1 1 4 5\n1 1 1 1 1 2 2 2 2 2\n1 1 1 1 1 2 2 2 4\n1 1 1 1 1 2 2 3 3\n1 1 1 1 1 2 3 5\n1 1 1 1 1 2 4 4\n1 1 1 1 1 3 3 4\n1 1 1 1 1 5 5\n1 1 1 1 2 2 2 2 3\n1 1 1 1 2 2 2 5\n1 1 1 1 2 2 3 4\n1 1 1 1 2 3 3 3\n1 1 1 1 2 4 5\n1 1 1 1 3 3 5\n1 1 1 1 3 4 4\n1 1 1 2 2 2 2 2 2\n1 1 1 2 2 2 2 4\n1 1 1 2 2 2 3 3\n1 1 1 2 2 3 5\n1 1 1 2 2 4 4\n1 1 1 2 3 3 4\n1 1 1 2 5 5\n1 1 1 3 3 3 3\n1 1 1 3 4 5\n1 1 1 4 4 4\n1 1 2 2 2 2 2 3\n1 1 2 2 2 2 5\n1 1 2 2 2 3 4\n1 1 2 2 3 3 3\n1 1 2 2 4 5\n1 1 2 3 3 5\n1 1 2 3 4 4\n1 1 3 3 3 4\n1 1 3 5 5\n1 1 4 4 5\n1 2 2 2 2 2 2 2\n1 2 2 2 2 2 4\n1 2 2 2 2 3 3\n1 2 2 2 3 5\n1 2 2 2 4 4\n1 2 2 3 3 4\n1 2 2 5 5\n1 2 3 3 3 3\n1 2 3 4 5\n1 2 4 4 4\n1 3 3 3 5\n1 3 3 4 4\n1 4 5 5\n2 2 2 2 2 2 3\n2 2 2 2 2 5\n2 2 2 2 3 4\n2 2 2 3 3 3\n2 2 2 4 5\n2 2 3 3 5\n2 2 3 4 4\n2 3 3 3 4\n2 3 5 5\n2 4 4 5\n3 3 3 3 3\n3 3 4 5\n3 4 4 4\n5 5 5",
        "is_hidden": true
      },
      {
        "input": "2 14\n6 8",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "3 33\n11 22 33",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "4 60\n10 20 30 40",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "1 1\n1",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "5 27\n3 6 9 12 15",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "2 1\n1 1",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "3 5\n1 2 3",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "4 10\n1 2 3 4",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "1 10\n1",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "5 15\n1 2 3 4 5",
        "output": "",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Find Minimum in Rotated Sorted Array",
    "input": "The first line contains `n`. The second line contains `n` integers.",
    "output": "The minimum element.",
    "description": "Suppose an array of length `n` sorted in ascending order is rotated between 1 and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become `[4,5,6,7,0,1,2]`. Given the sorted rotated array `nums` of unique elements, return the minimum element of this array. You must write an algorithm that runs in O(log n) time.",
    "difficulty": "medium",
    "categories": ["array", "binary-search"],
    "examples": [
      {
        "input": "7\n3 4 5 1 2",
        "output": "1",
        "is_hidden": false
      },
      {
        "input": "5\n11 13 15 17",
        "output": "11",
        "is_hidden": false
      }
    ],
    "constraints": ["All elements of `nums` are unique."],
    "hints": ["Use a modified binary search to find the inflection point."],
    "test_cases": [
      {
        "input": "7\n3 4 5 1 2",
        "output": "1",
        "is_hidden": false
      },
      {
        "input": "5\n11 13 15 17",
        "output": "11",
        "is_hidden": false
      },
      {
        "input": "5\n3 4 5 1 2",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "5\n4 5 6 7 0",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "3\n11 13 15",
        "output": "11",
        "is_hidden": true
      },
      {
        "input": "1\n1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "7\n4 5 6 7 0 1 2",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "2\n2 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "10\n8 9 10 1 2 3 4 5 6 7",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "6\n1 2 3 4 5 6",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "1\n100",
        "output": "100",
        "is_hidden": true
      },
      {
        "input": "8\n5 6 7 8 9 1 2 3",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "4\n10 20 30 5",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "12\n10 11 12 13 14 15 16 17 18 19 20 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "11\n3 4 5 6 7 8 9 10 11 1 2",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "9\n2 3 4 5 6 7 8 9 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "3\n3 1 2",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "1\n-1",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "10\n0 1 2 3 4 5 6 7 8 9",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "10\n9 0 1 2 3 4 5 6 7 8",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "10\n1 2 3 4 5 6 7 8 9 0",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "10\n5 6 7 8 9 0 1 2 3 4",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "2\n10 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "7\n1 2 3 4 5 6 7",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "7\n7 1 2 3 4 5 6",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "7\n6 7 1 2 3 4 5",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "7\n5 6 7 1 2 3 4",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "7\n4 5 6 7 1 2 3",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "7\n3 4 5 6 7 1 2",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "7\n2 3 4 5 6 7 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "5\n10 20 1 2 3",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "6\n-1 0 1 2 3 4",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "6\n4 -1 0 1 2 3",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "6\n3 4 -1 0 1 2",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "6\n2 3 4 -1 0 1",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "6\n1 2 3 4 -1 0",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "6\n0 1 2 3 4 -1",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "8\n-5 -4 -3 -2 -1 0 1 2",
        "output": "-5",
        "is_hidden": true
      },
      {
        "input": "8\n2 -5 -4 -3 -2 -1 0 1",
        "output": "-5",
        "is_hidden": true
      },
      {
        "input": "8\n1 2 -5 -4 -3 -2 -1 0",
        "output": "-5",
        "is_hidden": true
      },
      {
        "input": "8\n0 1 2 -5 -4 -3 -2 -1",
        "output": "-5",
        "is_hidden": true
      },
      {
        "input": "4\n1 2 3 4",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "4\n4 1 2 3",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "4\n3 4 1 2",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "4\n2 3 4 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "10\n10 20 30 40 50 60 70 80 90 0",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "2\n-1 -2",
        "output": "-2",
        "is_hidden": true
      },
      {
        "input": "3\n-1 -2 -3",
        "output": "-3",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Container With Most Water",
    "input": "The first line contains `n`. The second line contains `n` integers.",
    "output": "The maximum area.",
    "description": "You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `ith` line are `(i, 0)` and `(i, height[i])`. Find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water a container can store.",
    "difficulty": "medium",
    "categories": ["array", "greedy"],
    "examples": [
      {
        "input": "9\n1 8 6 2 5 4 8 3 7",
        "output": "49",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [
      "Use a two-pointer approach, starting from the widest possible container."
    ],
    "test_cases": [
      {
        "input": "9\n1 8 6 2 5 4 8 3 7",
        "output": "49",
        "is_hidden": false
      },
      {
        "input": "2\n1 1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "4\n1 2 3 4",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "10\n10 9 8 7 6 5 4 3 2 1",
        "output": "25",
        "is_hidden": true
      },
      {
        "input": "10\n1 2 3 4 5 6 7 8 9 10",
        "output": "25",
        "is_hidden": true
      },
      {
        "input": "15\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1",
        "output": "14",
        "is_hidden": true
      },
      {
        "input": "12\n1 100 100 1 1 1 1 100 100 1 1 1",
        "output": "700",
        "is_hidden": true
      },
      {
        "input": "8\n5 5 5 5 5 5 5 5",
        "output": "35",
        "is_hidden": true
      },
      {
        "input": "7\n1 10 1 10 1 10 1",
        "output": "40",
        "is_hidden": true
      },
      {
        "input": "6\n10 1 1 1 1 10",
        "output": "50",
        "is_hidden": true
      },
      {
        "input": "20\n1 2 3 4 5 6 7 8 9 10 10 9 8 7 6 5 4 3 2 1",
        "output": "55",
        "is_hidden": true
      },
      {
        "input": "11\n2 3 4 5 18 17 6 5 4 3 2",
        "output": "24",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 1 2 1",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "10\n8 1 2 3 4 5 6 7 8 9",
        "output": "72",
        "is_hidden": true
      },
      {
        "input": "10\n9 8 7 6 5 4 3 2 1 10",
        "output": "81",
        "is_hidden": true
      },
      {
        "input": "13\n1 2 3 4 5 6 7 6 5 4 3 2 1",
        "output": "24",
        "is_hidden": true
      },
      {
        "input": "2\n1000 1000",
        "output": "1000",
        "is_hidden": true
      },
      {
        "input": "14\n10 20 30 40 50 60 70 60 50 40 30 20 10 1",
        "output": "240",
        "is_hidden": true
      },
      {
        "input": "1\n1",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "10\n1 2 1 3 1 4 1 5 1 6",
        "output": "18",
        "is_hidden": true
      },
      {
        "input": "9\n6 1 5 1 4 1 3 1 2",
        "output": "18",
        "is_hidden": true
      },
      {
        "input": "8\n1 1 10 10 10 10 1 1",
        "output": "30",
        "is_hidden": true
      },
      {
        "input": "10\n1 1 1 1 10 10 1 1 1 1",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "12\n10 9 8 7 6 5 5 6 7 8 9 10",
        "output": "110",
        "is_hidden": true
      },
      {
        "input": "7\n-1 -2 -3 -4 -5 -6 -7",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "10\n0 1 0 1 0 1 0 1 0 1",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "6\n1 1 1 10 10 1",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "16\n1 2 3 4 5 6 7 8 8 7 6 5 4 3 2 1",
        "output": "36",
        "is_hidden": true
      },
      {
        "input": "5\n1 10 1 1 1",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "5\n1 1 1 10 1",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "8\n10 1 2 3 4 5 6 10",
        "output": "70",
        "is_hidden": true
      },
      {
        "input": "10\n1 2 3 4 5 1 2 3 4 5",
        "output": "25",
        "is_hidden": true
      },
      {
        "input": "11\n5 4 3 2 1 1 2 3 4 5 5",
        "output": "50",
        "is_hidden": true
      },
      {
        "input": "9\n1 1 1 1 1 1 1 1 1",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "12\n1 2 3 4 5 6 1 2 3 4 5 6",
        "output": "36",
        "is_hidden": true
      },
      {
        "input": "10\n100 1 2 3 4 5 6 7 8 100",
        "output": "900",
        "is_hidden": true
      },
      {
        "input": "7\n1 2 3 100 3 2 1",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "8\n10 10 1 1 1 1 10 10",
        "output": "70",
        "is_hidden": true
      },
      {
        "input": "10\n1 2 3 4 5 5 4 3 2 1",
        "output": "15",
        "is_hidden": true
      },
      {
        "input": "12\n1 1 1 1 1 1 1 1 1 1 1 1",
        "output": "11",
        "is_hidden": true
      },
      {
        "input": "10\n-10 -9 -8 -7 -6 -5 -4 -3 -2 -1",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "11\n1 3 2 5 4 7 6 9 8 11 10",
        "output": "35",
        "is_hidden": true
      },
      {
        "input": "9\n1 1 1 10 1 10 1 1 1",
        "output": "20",
        "is_hidden": true
      },
      {
        "input": "8\n1 8 2 7 3 6 4 5",
        "output": "30",
        "is_hidden": true
      },
      {
        "input": "10\n10 1 10 1 10 1 10 1 10 1",
        "output": "80",
        "is_hidden": true
      },
      {
        "input": "12\n1 2 3 4 5 6 6 5 4 3 2 1",
        "output": "21",
        "is_hidden": true
      },
      {
        "input": "7\n10 1 1 1 1 1 1",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "7\n1 1 1 1 1 1 10",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "8\n1 10 10 10 10 10 10 1",
        "output": "50",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Median of Two Sorted Arrays",
    "input": "First line: `m`. Second line: `m` integers for `nums1`. Third line: `n`. Fourth line: `n` integers for `nums2`.",
    "output": "The median value, with one decimal place.",
    "description": "Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).",
    "difficulty": "hard",
    "categories": ["array", "binary-search"],
    "examples": [
      {
        "input": "2\n1 3\n1\n2",
        "output": "2.0",
        "is_hidden": false
      },
      {
        "input": "2\n1 2\n2\n3 4",
        "output": "2.5",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [
      "The key is to find the correct partition in both arrays that divides the combined array into two equal halves."
    ],
    "test_cases": [
      {
        "input": "2\n1 3\n1\n2",
        "output": "2.0",
        "is_hidden": false
      },
      {
        "input": "2\n1 2\n2\n3 4",
        "output": "2.5",
        "is_hidden": false
      },
      {
        "input": "4\n1 3 5 7\n4\n2 4 6 8",
        "output": "4.5",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 3 4 5\n5\n6 7 8 9 10",
        "output": "5.5",
        "is_hidden": true
      },
      {
        "input": "3\n-10 -5 0\n3\n5 10 15",
        "output": "2.5",
        "is_hidden": true
      },
      {
        "input": "1\n1\n1\n1",
        "output": "1.0",
        "is_hidden": true
      },
      {
        "input": "4\n10 20 30 40\n1\n25",
        "output": "25.0",
        "is_hidden": true
      },
      {
        "input": "3\n1 1 1\n3\n2 2 2",
        "output": "1.5",
        "is_hidden": true
      },
      {
        "input": "5\n-5 -4 -3 -2 -1\n5\n1 2 3 4 5",
        "output": "0.0",
        "is_hidden": true
      },
      {
        "input": "2\n100 200\n2\n-200 -100",
        "output": "0.0",
        "is_hidden": true
      },
      {
        "input": "1\n10\n4\n1 2 3 4",
        "output": "3.0",
        "is_hidden": true
      },
      {
        "input": "4\n1 2 3 4\n1\n10",
        "output": "3.0",
        "is_hidden": true
      },
      {
        "input": "5\n1 1 2 2 3\n5\n1 1 2 2 3",
        "output": "2.0",
        "is_hidden": true
      },
      {
        "input": "3\n-3 -2 -1\n3\n-6 -5 -4",
        "output": "-3.5",
        "is_hidden": true
      },
      {
        "input": "4\n1 5 9 13\n4\n2 6 10 14",
        "output": "7.5",
        "is_hidden": true
      },
      {
        "input": "1\n5\n5\n1 2 3 4 6",
        "output": "3.5",
        "is_hidden": true
      },
      {
        "input": "1\n5\n5\n6 7 8 9 10",
        "output": "7.5",
        "is_hidden": true
      },
      {
        "input": "2\n2 4\n3\n1 3 5",
        "output": "3.0",
        "is_hidden": true
      },
      {
        "input": "4\n1 2 3 10\n4\n4 5 6 7",
        "output": "4.5",
        "is_hidden": true
      },
      {
        "input": "5\n-10 -8 -6 -4 -2\n5\n-9 -7 -5 -3 -1",
        "output": "-5.5",
        "is_hidden": true
      },
      {
        "input": "3\n10 10 10\n3\n10 10 10",
        "output": "10.0",
        "is_hidden": true
      },
      {
        "input": "1\n0\n5\n1 2 3 4 5",
        "output": "2.5",
        "is_hidden": true
      },
      {
        "input": "2\n1 100\n2\n2 99",
        "output": "50.5",
        "is_hidden": true
      },
      {
        "input": "4\n1 4 5 8\n4\n2 3 6 7",
        "output": "4.5",
        "is_hidden": true
      },
      {
        "input": "3\n1 2 3\n3\n4 5 6",
        "output": "3.5",
        "is_hidden": true
      },
      {
        "input": "4\n-4 -3 -2 -1\n1\n0",
        "output": "-2.0",
        "is_hidden": true
      },
      {
        "input": "5\n0 1 2 3 4\n5\n0 1 2 3 4",
        "output": "2.0",
        "is_hidden": true
      },
      {
        "input": "2\n1 2\n4\n1 2 3 4",
        "output": "2.0",
        "is_hidden": true
      },
      {
        "input": "3\n1 1 1\n1\n1",
        "output": "1.0",
        "is_hidden": true
      },
      {
        "input": "4\n-10 -20 -30 -40\n4\n10 20 30 40",
        "output": "-15.0",
        "is_hidden": true
      },
      {
        "input": "2\n1 1\n2\n2 2",
        "output": "1.5",
        "is_hidden": true
      },
      {
        "input": "5\n1 3 5 7 9\n5\n2 4 6 8 10",
        "output": "5.5",
        "is_hidden": true
      },
      {
        "input": "3\n1 2 3\n2\n1 2",
        "output": "2.0",
        "is_hidden": true
      },
      {
        "input": "4\n1 1 1 1\n4\n2 2 2 2",
        "output": "1.5",
        "is_hidden": true
      },
      {
        "input": "1\n100\n1\n-100",
        "output": "0.0",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 3 4 5\n1\n3",
        "output": "3.0",
        "is_hidden": true
      },
      {
        "input": "1\n3\n5\n1 2 3 4 5",
        "output": "3.0",
        "is_hidden": true
      },
      {
        "input": "4\n10 20 30 40\n3\n5 15 25",
        "output": "20.0",
        "is_hidden": true
      },
      {
        "input": "3\n1 1 3\n3\n1 2 2",
        "output": "1.5",
        "is_hidden": true
      },
      {
        "input": "5\n-5 -3 -1 1 3\n5\n-4 -2 0 2 4",
        "output": "-0.5",
        "is_hidden": true
      },
      {
        "input": "2\n1 5\n3\n2 3 4",
        "output": "3.0",
        "is_hidden": true
      },
      {
        "input": "4\n2 4 6 8\n4\n1 3 5 7",
        "output": "4.5",
        "is_hidden": true
      },
      {
        "input": "1\n1\n1\n2",
        "output": "1.5",
        "is_hidden": true
      },
      {
        "input": "3\n1 2 3\n3\n1 2 3",
        "output": "2.0",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Largest Rectangle in Histogram",
    "input": "First line: `n`. Second line: `n` integers for `heights`.",
    "output": "The area of the largest rectangle.",
    "description": "Given an array of integers `heights` representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.",
    "difficulty": "hard",
    "categories": ["array", "hash-table"],
    "examples": [
      {
        "input": "6\n2 1 5 6 2 3",
        "output": "10",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [
      "A stack can be used to keep track of bars in increasing height order."
    ],
    "test_cases": [
      {
        "input": "6\n2 1 5 6 2 3",
        "output": "10",
        "is_hidden": false
      },
      {
        "input": "2\n2 4",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "1\n5",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 3 4 5",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "5\n5 4 3 2 1",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "10\n1 1 1 1 1 1 1 1 1 1",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "8\n2 1 2 1 2 1 2 1",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "7\n10 1 10 1 10 1 10",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "9\n2 4 6 8 10 8 6 4 2",
        "output": "30",
        "is_hidden": true
      },
      {
        "input": "1\n1000",
        "output": "1000",
        "is_hidden": true
      },
      {
        "input": "12\n1 2 3 4 5 6 6 5 4 3 2 1",
        "output": "24",
        "is_hidden": true
      },
      {
        "input": "11\n3 5 5 2 5 5 6 6 4 4 4",
        "output": "28",
        "is_hidden": true
      },
      {
        "input": "10\n0 1 2 3 4 5 6 7 8 9",
        "output": "25",
        "is_hidden": true
      },
      {
        "input": "10\n9 8 7 6 5 4 3 2 1 0",
        "output": "25",
        "is_hidden": true
      },
      {
        "input": "5\n0 0 0 0 0",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "4\n10 10 10 10",
        "output": "40",
        "is_hidden": true
      },
      {
        "input": "6\n1 10 10 10 10 1",
        "output": "40",
        "is_hidden": true
      },
      {
        "input": "15\n1 2 3 4 5 4 3 2 1 2 3 4 5 4 3",
        "output": "15",
        "is_hidden": true
      },
      {
        "input": "13\n2 3 2 3 2 3 2 3 2 3 2 3 2",
        "output": "26",
        "is_hidden": true
      },
      {
        "input": "10\n5 5 5 1 5 5 5 5 5 5",
        "output": "30",
        "is_hidden": true
      },
      {
        "input": "10\n5 5 5 5 5 1 5 5 5 5",
        "output": "25",
        "is_hidden": true
      },
      {
        "input": "9\n1 2 3 4 5 4 3 2 1",
        "output": "15",
        "is_hidden": true
      },
      {
        "input": "8\n10 20 30 40 30 20 10 5",
        "output": "100",
        "is_hidden": true
      },
      {
        "input": "7\n1 8 6 2 5 4 7",
        "output": "12",
        "is_hidden": true
      },
      {
        "input": "1\n0",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "10\n10 9 8 1 2 3 7 6 5 4",
        "output": "24",
        "is_hidden": true
      },
      {
        "input": "10\n4 2 0 3 2 5 1 1 1 1",
        "output": "7",
        "is_hidden": true
      },
      {
        "input": "10\n6 2 5 4 5 1 6 1 1 1",
        "output": "12",
        "is_hidden": true
      },
      {
        "input": "12\n2 1 5 6 2 3 1 1 1 1 1 1",
        "output": "12",
        "is_hidden": true
      },
      {
        "input": "12\n1 1 1 2 1 5 6 2 3 1 1 1",
        "output": "12",
        "is_hidden": true
      },
      {
        "input": "10\n10 10 10 10 10 10 10 10 10 10",
        "output": "100",
        "is_hidden": true
      },
      {
        "input": "8\n1 1 1 10 10 1 1 1",
        "output": "20",
        "is_hidden": true
      },
      {
        "input": "7\n1 2 3 10 3 2 1",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "10\n1 2 3 4 5 1 2 3 4 5",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "9\n5 4 3 2 1 2 3 4 5",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "11\n1 1 1 1 1 100 1 1 1 1 1",
        "output": "100",
        "is_hidden": true
      },
      {
        "input": "1\n1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "10\n-1 -2 -3 -4 -5 -6 -7 -8 -9 -10",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "8\n1 1 1 1 1 1 1 1",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "10\n1 2 1 2 1 2 1 2 1 2",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "12\n1 2 3 2 1 1 2 3 2 1 1 2",
        "output": "12",
        "is_hidden": true
      },
      {
        "input": "10\n10 1 1 1 1 1 1 1 1 1",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "10\n1 1 1 1 1 1 1 1 1 10",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "9\n1 10 1 1 1 1 1 10 1",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "8\n10 1 10 1 10 1 10 1",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "10\n1 2 3 4 5 0 1 2 3 4",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "12\n1 2 3 4 5 6 0 6 5 4 3 2",
        "output": "12",
        "is_hidden": true
      },
      {
        "input": "7\n1 1 1 0 1 1 1",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "8\n1 10 1 1 1 1 10 1",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "10\n10 1 2 3 4 5 6 7 8 9",
        "output": "25",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Merge k Sorted Lists",
    "input": "First line: `k`. Following lines contain `n_i` on one line and `n_i` integers on the next, for each of the `k` lists.",
    "output": "A single line of space-separated integers for the merged list.",
    "description": "You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.",
    "difficulty": "hard",
    "categories": ["linked-list", "sorting"],
    "examples": [
      {
        "input": "3\n3\n1 4 5\n3\n1 3 4\n2\n2 6",
        "output": "1 1 2 3 4 4 5 6",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [
      "A min-heap (priority queue) is very effective for this problem."
    ],
    "test_cases": [
      {
        "input": "3\n3\n1 4 5\n3\n1 3 4\n2\n2 6",
        "output": "1 1 2 3 4 4 5 6",
        "is_hidden": false
      },
      {
        "input": "1\n0",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "2\n1\n1\n0",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "1\n1\n1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "3\n1\n1\n1\n2\n1\n3",
        "output": "1 2 3",
        "is_hidden": true
      },
      {
        "input": "5\n1\n10\n1\n20\n1\n30\n1\n40\n1\n50",
        "output": "10 20 30 40 50",
        "is_hidden": true
      },
      {
        "input": "2\n5\n-10 -5 0 5 10\n5\n-8 -6 -4 -2 0",
        "output": "-10 -8 -6 -5 -4 -2 0 0 5 10",
        "is_hidden": true
      },
      {
        "input": "4\n3\n1 1 1\n3\n2 2 2\n3\n3 3 3\n3\n4 4 4",
        "output": "1 1 1 2 2 2 3 3 3 4 4 4",
        "is_hidden": true
      },
      {
        "input": "1\n10\n1 2 3 4 5 6 7 8 9 10",
        "output": "1 2 3 4 5 6 7 8 9 10",
        "is_hidden": true
      },
      {
        "input": "0",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "3\n2\n-2 -1\n2\n-4 -3\n2\n-6 -5",
        "output": "-6 -5 -4 -3 -2 -1",
        "is_hidden": true
      },
      {
        "input": "2\n3\n10 20 30\n3\n15 25 35",
        "output": "10 15 20 25 30 35",
        "is_hidden": true
      },
      {
        "input": "4\n1\n1\n1\n2\n1\n3\n1\n4",
        "output": "1 2 3 4",
        "is_hidden": true
      },
      {
        "input": "5\n2\n1 1\n2\n2 2\n2\n3 3\n2\n4 4\n2\n5 5",
        "output": "1 1 2 2 3 3 4 4 5 5",
        "is_hidden": true
      },
      {
        "input": "2\n1\n-100\n1\n100",
        "output": "-100 100",
        "is_hidden": true
      },
      {
        "input": "3\n3\n-5 0 5\n3\n-6 1 6\n3\n-7 2 7",
        "output": "-7 -6 -5 0 1 2 5 6 7",
        "is_hidden": true
      },
      {
        "input": "1\n1\n-1",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "4\n2\n10 10\n2\n20 20\n2\n30 30\n2\n40 40",
        "output": "10 10 20 20 30 30 40 40",
        "is_hidden": true
      },
      {
        "input": "2\n0\n0",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "3\n4\n1 2 3 4\n4\n5 6 7 8\n4\n9 10 11 12",
        "output": "1 2 3 4 5 6 7 8 9 10 11 12",
        "is_hidden": true
      },
      {
        "input": "2\n5\n1 3 5 7 9\n5\n2 4 6 8 10",
        "output": "1 2 3 4 5 6 7 8 9 10",
        "is_hidden": true
      },
      {
        "input": "4\n1\n0\n1\n0\n1\n0\n1\n0",
        "output": "0 0 0 0",
        "is_hidden": true
      },
      {
        "input": "5\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1",
        "output": "1 1 1 1 1",
        "is_hidden": true
      },
      {
        "input": "2\n3\n-1 -1 -1\n3\n-1 -1 -1",
        "output": "-1 -1 -1 -1 -1 -1",
        "is_hidden": true
      },
      {
        "input": "3\n2\n1 5\n2\n2 6\n2\n3 7",
        "output": "1 2 3 5 6 7",
        "is_hidden": true
      },
      {
        "input": "1\n5\n-2 -1 0 1 2",
        "output": "-2 -1 0 1 2",
        "is_hidden": true
      },
      {
        "input": "4\n3\n10 20 30\n3\n10 20 30\n3\n10 20 30\n3\n10 20 30",
        "output": "10 10 10 10 20 20 20 20 30 30 30 30",
        "is_hidden": true
      },
      {
        "input": "2\n1\n1\n1\n1",
        "output": "1 1",
        "is_hidden": true
      },
      {
        "input": "3\n5\n1 1 2 3 5\n5\n8 13 21 34 55\n5\n1 2 4 8 16",
        "output": "1 1 1 2 2 3 4 5 8 8 13 16 21 34 55",
        "is_hidden": true
      },
      {
        "input": "1\n3\n100 200 300",
        "output": "100 200 300",
        "is_hidden": true
      },
      {
        "input": "4\n2\n-10 -20\n2\n-30 -40\n2\n10 20\n2\n30 40",
        "output": "-30 -40 -10 -20 10 20 30 40",
        "is_hidden": true
      },
      {
        "input": "2\n1\n1\n0",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "3\n1\n1\n1\n1\n1\n1",
        "output": "1 1 1",
        "is_hidden": true
      },
      {
        "input": "1\n0",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "4\n1\n10\n1\n-10\n1\n20\n1\n-20",
        "output": "-20 -10 10 20",
        "is_hidden": true
      },
      {
        "input": "2\n5\n1 2 3 4 5\n5\n1 2 3 4 5",
        "output": "1 1 2 2 3 3 4 4 5 5",
        "is_hidden": true
      },
      {
        "input": "3\n3\n1 2 3\n3\n1 2 3\n3\n1 2 3",
        "output": "1 1 1 2 2 2 3 3 3",
        "is_hidden": true
      },
      {
        "input": "1\n2\n-5 5",
        "output": "-5 5",
        "is_hidden": true
      },
      {
        "input": "4\n1\n1\n1\n1\n1\n1\n1\n1",
        "output": "1 1 1 1",
        "is_hidden": true
      },
      {
        "input": "2\n10\n1 1 1 1 1 1 1 1 1 1\n10\n2 2 2 2 2 2 2 2 2 2",
        "output": "1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2",
        "is_hidden": true
      },
      {
        "input": "3\n2\n1 100\n2\n2 99\n2\n3 98",
        "output": "1 2 3 98 99 100",
        "is_hidden": true
      },
      {
        "input": "1\n4\n-1 0 1 2",
        "output": "-1 0 1 2",
        "is_hidden": true
      },
      {
        "input": "4\n2\n1 2\n2\n1 2\n2\n1 2\n2\n1 2",
        "output": "1 1 1 1 2 2 2 2",
        "is_hidden": true
      },
      {
        "input": "2\n3\n-10 -10 -10\n3\n10 10 10",
        "output": "-10 -10 -10 10 10 10",
        "is_hidden": true
      },
      {
        "input": "3\n1\n-1\n1\n0\n1\n1",
        "output": "-1 0 1",
        "is_hidden": true
      },
      {
        "input": "1\n1\n0",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "4\n0\n0\n0\n0",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "2\n2\n-1 1\n2\n-1 1",
        "output": "-1 -1 1 1",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Regular Expression Matching",
    "input": "First line: string `s`. Second line: pattern `p`.",
    "output": "`YES` if the pattern matches the entire string, `NO` otherwise.",
    "description": "Given an input string `s` and a pattern `p`, implement regular expression matching with support for `.` and `*`.\n- `.` Matches any single character.\n- `*` Matches zero or more of the preceding element.",
    "difficulty": "hard",
    "categories": ["string", "dynamic-programming"],
    "examples": [
      {
        "input": "aa\na",
        "output": "NO",
        "is_hidden": false
      },
      {
        "input": "aa\na*",
        "output": "YES",
        "is_hidden": false
      },
      {
        "input": "ab\n.*",
        "output": "YES",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [
      "Use dynamic programming. Let `dp[i][j]` be true if the first `i` characters of `s` match the first `j` characters of `p`."
    ],
    "test_cases": [
      {
        "input": "aa\na",
        "output": "NO",
        "is_hidden": false
      },
      {
        "input": "aa\na*",
        "output": "YES",
        "is_hidden": false
      },
      {
        "input": "ab\n.*",
        "output": "YES",
        "is_hidden": false
      },
      {
        "input": "aab\ncab",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "mississippi\nmisisp*.",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "a\nab*",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "ab\n.*c",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "aaa\na*a",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "bbb\nb*b",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "ccc\nc.c",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "abcd\nd*",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "a\n.",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "ab\n.b",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "abc\na.c",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "a\na.",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "aa\naa",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "a\nb",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "a\nab*a",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "aaa\nabac*a",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "mississippi\nmisisip*.",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "aa\na.",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "ab\n..",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "abc\n...",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "a\n...a",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "aasdfasdfasdfasdfas\naasdf.*asdf.*asdf.*asdf.*s",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "b\na*b",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "c\nb*c",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "d\nc*d",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "e\nd*e",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "f\ne*f",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "g\nf*g",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "h\ng*h",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "i\nh*i",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "j\ni*j",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "k\nj*k",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "l\nk*l",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "m\nl*m",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "n\nm*n",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "o\nn*o",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "p\no*p",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "q\np*q",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "r\nq*r",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "s\nr*s",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "t\ns*t",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "u\nt*u",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "v\nu*v",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "w\nv*w",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "x\nw*x",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "y\nx*y",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "z\ny*z",
        "output": "YES",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Binary Tree Maximum Path Sum",
    "input": "The first line contains an integer `n`, the number of nodes. The second line contains `n` space-separated values representing the tree in level-order, with `null` for empty nodes.",
    "output": "The maximum path sum.",
    "description": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node's values in the path. Given the root of a binary tree, return the maximum path sum of any non-empty path.",
    "difficulty": "hard",
    "categories": ["tree", "dynamic-programming"],
    "examples": [
      {
        "input": "3\n1 2 3",
        "output": "6",
        "is_hidden": false
      },
      {
        "input": "7\n-10 9 20 null null 15 7",
        "output": "42",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [
      "For each node, compute the max path sum that goes through it. You'll need a recursive helper function."
    ],
    "test_cases": [
      {
        "input": "3\n1 2 3",
        "output": "6",
        "is_hidden": false
      },
      {
        "input": "7\n-10 9 20 null null 15 7",
        "output": "42",
        "is_hidden": false
      },
      {
        "input": "1\n-3",
        "output": "-3",
        "is_hidden": true
      },
      {
        "input": "2\n1 -2",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "3\n-1 -2 -3",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "5\n-10 -20 -30 -40 -50",
        "output": "-10",
        "is_hidden": true
      },
      {
        "input": "7\n5 4 8 11 null 13 4 7 2 null null null 1",
        "output": "48",
        "is_hidden": true
      },
      {
        "input": "1\n1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "2\n2 3",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "3\n1 -2 3",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 3 4 5",
        "output": "11",
        "is_hidden": true
      },
      {
        "input": "7\n-1 -2 -3 -4 -5 -6 -7",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "9\n10 5 15 null null 6 20",
        "output": "50",
        "is_hidden": true
      },
      {
        "input": "1\n0",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "4\n1 2 3 null",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "5\n-1 5 3 null -4",
        "output": "7",
        "is_hidden": true
      },
      {
        "input": "6\n1 2 null 3 null 4",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "7\n-2 1 3 -4 5 6 -7",
        "output": "13",
        "is_hidden": true
      },
      {
        "input": "3\n1 1 1",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "5\n2 2 2 2 2",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "7\n-1 -1 -1 -1 -1 -1 -1",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "9\n1 2 3 4 5 6 7 8 9",
        "output": "26",
        "is_hidden": true
      },
      {
        "input": "1\n1000",
        "output": "1000",
        "is_hidden": true
      },
      {
        "input": "2\n-1000 500",
        "output": "500",
        "is_hidden": true
      },
      {
        "input": "3\n500 -1000 200",
        "output": "700",
        "is_hidden": true
      },
      {
        "input": "5\n10 20 30 -1 -1",
        "output": "60",
        "is_hidden": true
      },
      {
        "input": "7\n-10 5 -15 2 8 12 18",
        "output": "18",
        "is_hidden": true
      },
      {
        "input": "9\n1 -2 3 -4 5 -6 7 -8 9",
        "output": "14",
        "is_hidden": true
      },
      {
        "input": "1\n-1",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "4\n-3 -1 null -2",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "5\n-1 -2 -3 null -4",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "6\n1 null 2 null 3 null",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "7\n-10 -5 -15 -2 -8 -12 -18",
        "output": "-2",
        "is_hidden": true
      },
      {
        "input": "3\n10 20 30",
        "output": "60",
        "is_hidden": true
      },
      {
        "input": "5\n-10 -20 -30 -40 -50",
        "output": "-10",
        "is_hidden": true
      },
      {
        "input": "7\n100 50 150 25 75 125 175",
        "output": "550",
        "is_hidden": true
      },
      {
        "input": "9\n-5 2 8 -1 3 6 10 -2 0",
        "output": "24",
        "is_hidden": true
      },
      {
        "input": "1\n-5",
        "output": "-5",
        "is_hidden": true
      },
      {
        "input": "4\n1 2 null 3",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "5\n1 -2 3 null 4",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "6\n-1 null -2 null -3 null",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "7\n-1 -2 -3 -4 -5 -6 -7",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "3\n-3 -2 -1",
        "output": "-1",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 3 4 5",
        "output": "11",
        "is_hidden": true
      },
      {
        "input": "9\n10 5 15 null 8 6 20",
        "output": "58",
        "is_hidden": true
      },
      {
        "input": "1\n-10",
        "output": "-10",
        "is_hidden": true
      },
      {
        "input": "4\n1 null 2 3",
        "output": "6",
        "is_hidden": true
      },
      {
        "input": "5\n-2 1 3 null -4",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "6\n1 2 3 null 4 null",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "7\n-10 5 15 2 8 12 18",
        "output": "45",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Climbing Stairs",
    "input": "A single integer `n`.",
    "output": "The number of distinct ways.",
    "description": "You are climbing a staircase. It takes `n` steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
    "difficulty": "easy",
    "categories": ["dynamic-programming"],
    "examples": [
      {
        "input": "2",
        "output": "2",
        "is_hidden": false
      },
      {
        "input": "3",
        "output": "3",
        "is_hidden": false
      }
    ],
    "constraints": ["1 <= n <= 45"],
    "hints": ["This problem is a variation of the Fibonacci sequence."],
    "test_cases": [
      {
        "input": "2",
        "output": "2",
        "is_hidden": false
      },
      {
        "input": "3",
        "output": "3",
        "is_hidden": false
      },
      {
        "input": "1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "4",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "5",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "6",
        "output": "13",
        "is_hidden": true
      },
      {
        "input": "7",
        "output": "21",
        "is_hidden": true
      },
      {
        "input": "8",
        "output": "34",
        "is_hidden": true
      },
      {
        "input": "9",
        "output": "55",
        "is_hidden": true
      },
      {
        "input": "10",
        "output": "89",
        "is_hidden": true
      },
      {
        "input": "11",
        "output": "144",
        "is_hidden": true
      },
      {
        "input": "12",
        "output": "233",
        "is_hidden": true
      },
      {
        "input": "13",
        "output": "377",
        "is_hidden": true
      },
      {
        "input": "14",
        "output": "610",
        "is_hidden": true
      },
      {
        "input": "15",
        "output": "987",
        "is_hidden": true
      },
      {
        "input": "16",
        "output": "1597",
        "is_hidden": true
      },
      {
        "input": "17",
        "output": "2584",
        "is_hidden": true
      },
      {
        "input": "18",
        "output": "4181",
        "is_hidden": true
      },
      {
        "input": "19",
        "output": "6765",
        "is_hidden": true
      },
      {
        "input": "20",
        "output": "10946",
        "is_hidden": true
      },
      {
        "input": "21",
        "output": "17711",
        "is_hidden": true
      },
      {
        "input": "22",
        "output": "28657",
        "is_hidden": true
      },
      {
        "input": "23",
        "output": "46368",
        "is_hidden": true
      },
      {
        "input": "24",
        "output": "75025",
        "is_hidden": true
      },
      {
        "input": "25",
        "output": "121393",
        "is_hidden": true
      },
      {
        "input": "26",
        "output": "196418",
        "is_hidden": true
      },
      {
        "input": "27",
        "output": "317811",
        "is_hidden": true
      },
      {
        "input": "28",
        "output": "514229",
        "is_hidden": true
      },
      {
        "input": "29",
        "output": "832040",
        "is_hidden": true
      },
      {
        "input": "30",
        "output": "1346269",
        "is_hidden": true
      },
      {
        "input": "31",
        "output": "2178309",
        "is_hidden": true
      },
      {
        "input": "32",
        "output": "3524578",
        "is_hidden": true
      },
      {
        "input": "33",
        "output": "5702887",
        "is_hidden": true
      },
      {
        "input": "34",
        "output": "9227465",
        "is_hidden": true
      },
      {
        "input": "35",
        "output": "14930352",
        "is_hidden": true
      },
      {
        "input": "36",
        "output": "24157817",
        "is_hidden": true
      },
      {
        "input": "37",
        "output": "39088169",
        "is_hidden": true
      },
      {
        "input": "38",
        "output": "63245986",
        "is_hidden": true
      },
      {
        "input": "39",
        "output": "102334155",
        "is_hidden": true
      },
      {
        "input": "40",
        "output": "165580141",
        "is_hidden": true
      },
      {
        "input": "41",
        "output": "267914296",
        "is_hidden": true
      },
      {
        "input": "42",
        "output": "433494437",
        "is_hidden": true
      },
      {
        "input": "43",
        "output": "701408733",
        "is_hidden": true
      },
      {
        "input": "44",
        "output": "1134903170",
        "is_hidden": true
      },
      {
        "input": "45",
        "output": "1836311903",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Invert Binary Tree",
    "input": "The first line contains an integer `n`, the number of nodes. The second line contains `n` space-separated values representing the tree in level-order, with `null` for empty nodes.",
    "output": "A single line of space-separated values representing the inverted tree in level-order.",
    "description": "Given the root of a binary tree, invert the tree, and return its root.",
    "difficulty": "easy",
    "categories": ["tree"],
    "examples": [
      {
        "input": "7\n4 2 7 1 3 6 9",
        "output": "4 7 2 9 6 3 1",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [
      "Solve this problem recursively by swapping the left and right children of each node."
    ],
    "test_cases": [
      {
        "input": "7\n4 2 7 1 3 6 9",
        "output": "4 7 2 9 6 3 1",
        "is_hidden": false
      },
      {
        "input": "3\n2 1 3",
        "output": "2 3 1",
        "is_hidden": true
      },
      {
        "input": "0",
        "output": "",
        "is_hidden": true
      },
      {
        "input": "1\n1",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "2\n1 2",
        "output": "1 2",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 3 null 4",
        "output": "1 3 2 4",
        "is_hidden": true
      },
      {
        "input": "10\n8 6 10 5 7 9 11 null null null null",
        "output": "8 10 6 11 9 7 5",
        "is_hidden": true
      },
      {
        "input": "1\n100",
        "output": "100",
        "is_hidden": true
      },
      {
        "input": "4\n10 5 15 null",
        "output": "10 15 5",
        "is_hidden": true
      },
      {
        "input": "9\n10 5 15 3 7 12 18 null null",
        "output": "10 15 5 18 12 7 3",
        "is_hidden": true
      },
      {
        "input": "15\n10 5 15 2 8 11 20 1 3 7 9 10 13 18 22",
        "output": "10 15 5 20 11 8 2 22 18 13 10 9 7 3 1",
        "is_hidden": true
      },
      {
        "input": "2\n1 null",
        "output": "1",
        "is_hidden": true
      },
      {
        "input": "3\n1 null 2",
        "output": "1 2",
        "is_hidden": true
      },
      {
        "input": "4\n1 null 2 null",
        "output": "1 2",
        "is_hidden": true
      },
      {
        "input": "5\n1 null 2 null 3",
        "output": "1 2 3",
        "is_hidden": true
      },
      {
        "input": "6\n1 null 2 null 3 null",
        "output": "1 2 3",
        "is_hidden": true
      },
      {
        "input": "7\n1 null 2 null 3 null 4",
        "output": "1 2 3 4",
        "is_hidden": true
      },
      {
        "input": "8\n1 null 2 null 3 null 4 null",
        "output": "1 2 3 4",
        "is_hidden": true
      },
      {
        "input": "9\n1 null 2 null 3 null 4 null 5",
        "output": "1 2 3 4 5",
        "is_hidden": true
      },
      {
        "input": "10\n1 null 2 null 3 null 4 null 5 null",
        "output": "1 2 3 4 5",
        "is_hidden": true
      },
      {
        "input": "11\n1 null 2 null 3 null 4 null 5 null 6",
        "output": "1 2 3 4 5 6",
        "is_hidden": true
      },
      {
        "input": "12\n1 null 2 null 3 null 4 null 5 null 6 null",
        "output": "1 2 3 4 5 6",
        "is_hidden": true
      },
      {
        "input": "13\n1 null 2 null 3 null 4 null 5 null 6 null 7",
        "output": "1 2 3 4 5 6 7",
        "is_hidden": true
      },
      {
        "input": "14\n1 null 2 null 3 null 4 null 5 null 6 null 7 null",
        "output": "1 2 3 4 5 6 7",
        "is_hidden": true
      },
      {
        "input": "15\n1 null 2 null 3 null 4 null 5 null 6 null 7 null 8",
        "output": "1 2 3 4 5 6 7 8",
        "is_hidden": true
      },
      {
        "input": "3\n1 2 null",
        "output": "1 2",
        "is_hidden": true
      },
      {
        "input": "5\n1 2 3 4 null",
        "output": "1 3 2 4",
        "is_hidden": true
      },
      {
        "input": "7\n1 2 3 4 5 6 7",
        "output": "1 3 2 7 6 5 4",
        "is_hidden": true
      },
      {
        "input": "9\n1 2 3 4 5 6 7 8 9",
        "output": "1 3 2 7 6 5 4 9 8",
        "is_hidden": true
      },
      {
        "input": "11\n1 2 3 4 5 6 7 8 9 10 11",
        "output": "1 3 2 7 6 5 4 11 10 9 8",
        "is_hidden": true
      },
      {
        "input": "13\n1 2 3 4 5 6 7 8 9 10 11 12 13",
        "output": "1 3 2 7 6 5 4 13 12 11 10 9 8",
        "is_hidden": true
      },
      {
        "input": "15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15",
        "output": "1 3 2 7 6 5 4 15 14 13 12 11 10 9 8",
        "is_hidden": true
      },
      {
        "input": "4\n1 2 3 4",
        "output": "1 3 2 4",
        "is_hidden": true
      },
      {
        "input": "6\n1 2 3 4 5 6",
        "output": "1 3 2 6 5 4",
        "is_hidden": true
      },
      {
        "input": "8\n1 2 3 4 5 6 7 8",
        "output": "1 3 2 7 6 5 4 8",
        "is_hidden": true
      },
      {
        "input": "10\n1 2 3 4 5 6 7 8 9 10",
        "output": "1 3 2 7 6 5 4 10 9 8",
        "is_hidden": true
      },
      {
        "input": "12\n1 2 3 4 5 6 7 8 9 10 11 12",
        "output": "1 3 2 7 6 5 4 12 11 10 9 8",
        "is_hidden": true
      },
      {
        "input": "14\n1 2 3 4 5 6 7 8 9 10 11 12 13 14",
        "output": "1 3 2 7 6 5 4 14 13 12 11 10 9 8",
        "is_hidden": true
      },
      {
        "input": "5\n5 4 3 2 1",
        "output": "5 3 4 1 2",
        "is_hidden": true
      },
      {
        "input": "7\n7 6 5 4 3 2 1",
        "output": "7 5 6 1 2 3 4",
        "is_hidden": true
      },
      {
        "input": "9\n9 8 7 6 5 4 3 2 1",
        "output": "9 7 8 3 4 5 6 1 2",
        "is_hidden": true
      },
      {
        "input": "11\n11 10 9 8 7 6 5 4 3 2 1",
        "output": "11 9 10 5 6 7 8 1 2 3 4",
        "is_hidden": true
      },
      {
        "input": "13\n13 12 11 10 9 8 7 6 5 4 3 2 1",
        "output": "13 11 12 7 8 9 10 1 2 3 4 5 6",
        "is_hidden": true
      },
      {
        "input": "15\n15 14 13 12 11 10 9 8 7 6 5 4 3 2 1",
        "output": "15 13 14 9 10 11 12 1 2 3 4 5 6 7 8",
        "is_hidden": true
      },
      {
        "input": "3\n-1 -2 -3",
        "output": "-1 -3 -2",
        "is_hidden": true
      },
      {
        "input": "5\n-1 -2 -3 -4 -5",
        "output": "-1 -3 -2 -5 -4",
        "is_hidden": true
      },
      {
        "input": "7\n-1 -2 -3 -4 -5 -6 -7",
        "output": "-1 -3 -2 -7 -6 -5 -4",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Best Time to Buy and Sell Stock",
    "input": "The first line contains an integer `n`. The second line contains `n` integers for `prices`.",
    "output": "The maximum profit.",
    "description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "difficulty": "easy",
    "categories": ["array", "greedy"],
    "examples": [
      {
        "input": "6\n7 1 5 3 6 4",
        "output": "5",
        "is_hidden": false
      },
      {
        "input": "5\n7 6 4 3 1",
        "output": "0",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [
      "Keep track of the minimum price found so far as you iterate through the array."
    ],
    "test_cases": [
      {
        "input": "6\n7 1 5 3 6 4",
        "output": "5",
        "is_hidden": false
      },
      {
        "input": "5\n7 6 4 3 1",
        "output": "0",
        "is_hidden": false
      },
      {
        "input": "1\n10",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "10\n10 9 8 7 6 5 4 3 2 1",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "10\n1 2 3 4 5 6 7 8 9 10",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "15\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "12\n100 1 100 1 100 1 100 1 100 1 100 1",
        "output": "99",
        "is_hidden": true
      },
      {
        "input": "8\n5 5 5 5 5 5 5 5",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "7\n10 1 10 1 10 1 10",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "6\n1 10 1 10 1 10",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "20\n10 11 9 12 8 13 7 14 6 15 5 16 4 17 3 18 2 19 1 20",
        "output": "19",
        "is_hidden": true
      },
      {
        "input": "11\n2 8 1 9 3 10 4 11 5 12 6",
        "output": "11",
        "is_hidden": true
      },
      {
        "input": "5\n10 20 5 30 1",
        "output": "25",
        "is_hidden": true
      },
      {
        "input": "10\n1 2 3 4 5 1 2 3 4 5",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "10\n5 4 3 2 1 5 4 3 2 1",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "13\n1 2 3 2 1 4 5 6 5 4 7 8 9",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "2\n1000 1",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "14\n10 20 30 40 50 60 70 5 15 25 35 45 55 65",
        "output": "60",
        "is_hidden": true
      },
      {
        "input": "1\n100",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "10\n1 1 2 1 3 1 4 1 5 1",
        "output": "4",
        "is_hidden": true
      },
      {
        "input": "9\n6 5 4 3 2 1 2 3 4",
        "output": "3",
        "is_hidden": true
      },
      {
        "input": "8\n1 10 2 9 3 8 4 7",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "10\n10 1 9 2 8 3 7 4 6 5",
        "output": "8",
        "is_hidden": true
      },
      {
        "input": "12\n100 110 90 120 80 130 70 140 60 150 50 160",
        "output": "110",
        "is_hidden": true
      },
      {
        "input": "7\n-1 -2 -3 -4 -5 -6 -7",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "10\n0 1 0 2 0 3 0 4 0 5",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "6\n1 10 2 20 3 30",
        "output": "29",
        "is_hidden": true
      },
      {
        "input": "16\n8 7 6 5 4 3 2 1 10 9 8 7 6 5 4 3",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "5\n10 1 10 1 10",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "5\n1 10 1 10 1",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "8\n1 1 1 1 10 10 10 10",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "10\n10 10 10 10 1 1 1 1 1 1",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "11\n10 20 30 40 50 0 60 70 80 90 100",
        "output": "100",
        "is_hidden": true
      },
      {
        "input": "9\n1 1 1 1 1 1 1 1 1",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "12\n6 5 4 3 2 1 1 2 3 4 5 6",
        "output": "5",
        "is_hidden": true
      },
      {
        "input": "10\n100 101 102 103 104 105 106 107 108 109",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "7\n109 108 107 106 105 104 103",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "8\n10 1 10 2 10 3 10 4",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "10\n1 10 1 10 1 10 1 10 1 10",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "12\n10 9 11 8 12 7 13 6 14 5 15 4",
        "output": "10",
        "is_hidden": true
      },
      {
        "input": "7\n1 1 1 1 1 1 1",
        "output": "0",
        "is_hidden": true
      },
      {
        "input": "7\n10 1 10 1 10 1 10",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "8\n1 10 1 1 1 1 1 10",
        "output": "9",
        "is_hidden": true
      },
      {
        "input": "8\n10 1 1 1 1 1 1 10",
        "output": "9",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Group Anagrams",
    "input": "The first line contains an integer `n`. The next `n` lines contain the strings.",
    "output": "Each line of output should contain a group of space-separated anagrams.",
    "description": "Given an array of strings `strs`, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "difficulty": "medium",
    "categories": ["string", "hash-table"],
    "examples": [
      {
        "input": "6\neat\ntea\ntan\nate\nnat\nbat",
        "output": "eat tea ate\ntan nat\nbat",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [
      "A hash map can be used where the key is the sorted version of a string."
    ],
    "test_cases": [
      {
        "input": "6\neat\ntea\ntan\nate\nnat\nbat",
        "output": "eat tea ate\ntan nat\nbat",
        "is_hidden": false
      },
      {
        "input": "1\na",
        "output": "a",
        "is_hidden": true
      },
      {
        "input": "2\nab\nba",
        "output": "ab ba",
        "is_hidden": true
      },
      {
        "input": "1\n\"\"",
        "output": "\"\"",
        "is_hidden": true
      },
      {
        "input": "3\nabc\nbca\ncab",
        "output": "abc bca cab",
        "is_hidden": true
      },
      {
        "input": "5\napple\npapel\napply\nleppa\nappeal",
        "output": "appeal\napply\napple papel leppa",
        "is_hidden": true
      },
      {
        "input": "10\ncat\ndog\nact\ngod\ntca\nodg\ntac\ngdo\natc\nogd",
        "output": "dog god odg gdo ogd\ncat act tca tac atc",
        "is_hidden": true
      },
      {
        "input": "4\nstop\npots\ntops\nspot",
        "output": "stop pots tops spot",
        "is_hidden": true
      },
      {
        "input": "3\nlisten\nsilent\nenlist",
        "output": "listen silent enlist",
        "is_hidden": true
      },
      {
        "input": "1\nhello",
        "output": "hello",
        "is_hidden": true
      },
      {
        "input": "2\nworld\ndlrow",
        "output": "world dlrow",
        "is_hidden": true
      },
      {
        "input": "7\nabc\ndef\nghi\nacb\nfed\nihg\nbac",
        "output": "def fed\nghi ihg\nabc acb bac",
        "is_hidden": true
      },
      {
        "input": "5\na\nb\nc\nd\ne",
        "output": "e\nc\nb\nd\na",
        "is_hidden": true
      },
      {
        "input": "8\naaaa\nbbbb\ncccc\ndddd\naaaa\nbbbb\ncccc\ndddd",
        "output": "dddd dddd\ncccc cccc\nbbbb bbbb\naaaa aaaa",
        "is_hidden": true
      },
      {
        "input": "6\nrace\ncare\nacre\ntear\nrate\neatr",
        "output": "tear rate eatr\nrace care acre",
        "is_hidden": true
      },
      {
        "input": "4\nflow\nwolf\nfowl\nlowf",
        "output": "flow wolf fowl lowf",
        "is_hidden": true
      },
      {
        "input": "3\nempty\nempty\nempty",
        "output": "empty empty empty",
        "is_hidden": true
      },
      {
        "input": "2\nz\nz",
        "output": "z z",
        "is_hidden": true
      },
      {
        "input": "10\nabcde\nedcba\nbcdea\naedcb\ncdeab\nbacde\ndebac\nacbed\nebdca\ncebad",
        "output": "abcde edcba bcdea aedcb cdeab bacde debac acbed ebdca cebad",
        "is_hidden": true
      },
      {
        "input": "5\nab\nba\nabc\nbca\nacb",
        "output": "abc bca acb\nab ba",
        "is_hidden": true
      },
      {
        "input": "6\naab\naba\nbaa\nbba\nbab\nabb",
        "output": "bba bab abb\naab aba baa",
        "is_hidden": true
      },
      {
        "input": "4\nsame\nsame\nemas\nemas",
        "output": "same same emas emas",
        "is_hidden": true
      },
      {
        "input": "3\none\ntwo\nthree",
        "output": "three\ntwo\none",
        "is_hidden": true
      },
      {
        "input": "7\nearth\nheart\nhater\neathr\ntrahe\nrehat\nthear",
        "output": "earth heart hater eathr trahe rehat thear",
        "is_hidden": true
      },
      {
        "input": "5\nno\non\nyes\nsey\nesy",
        "output": "yes sey esy\nno on",
        "is_hidden": true
      },
      {
        "input": "8\ntesting\ningtest\ngentist\nestting\ngistnet\ntseting\ngnitset\nntgiste",
        "output": "testing ingtest gentist estting gistnet tseting gnitset ntgiste",
        "is_hidden": true
      },
      {
        "input": "6\napple\npleap\npapel\nleppa\nppale\nappel",
        "output": "apple pleap papel leppa ppale appel",
        "is_hidden": true
      },
      {
        "input": "4\nword\ndrow\nordw\nwdor",
        "output": "word drow ordw wdor",
        "is_hidden": true
      },
      {
        "input": "3\na\nb\na",
        "output": "b\na a",
        "is_hidden": true
      },
      {
        "input": "2\nx\ny",
        "output": "y\nx",
        "is_hidden": true
      },
      {
        "input": "10\ncinema\niceman\nanemic\nmanice\ncenima\nnicema\nmaceni\niceman\nmanice\ncinema",
        "output": "cinema iceman anemic manice cenima nicema maceni iceman manice cinema",
        "is_hidden": true
      },
      {
        "input": "5\nd\nc\nb\na\nd",
        "output": "b\nc\na\nd d",
        "is_hidden": true
      },
      {
        "input": "6\nhello\nolleh\nllohe\neholl\nohell\nlelho",
        "output": "hello olleh llohe eholl ohell lelho",
        "is_hidden": true
      },
      {
        "input": "4\nsort\nrots\nstor\ntors",
        "output": "sort rots stor tors",
        "is_hidden": true
      },
      {
        "input": "3\nhi\nih\nih",
        "output": "hi ih ih",
        "is_hidden": true
      },
      {
        "input": "2\nup\npu",
        "output": "up pu",
        "is_hidden": true
      },
      {
        "input": "10\ntop\npot\nopt\notp\npto\ntpo\npost\nstop\nspot\ntops",
        "output": "post stop spot tops\ntop pot opt otp pto tpo",
        "is_hidden": true
      },
      {
        "input": "5\ngood\ndoog\ndoggo\ngoddo\nogdog",
        "output": "goddo\ndoggo ogdog\ngood doog",
        "is_hidden": true
      },
      {
        "input": "6\nqwert\ntrewq\nwretq\ntrewq\ntqwer\nrewqt",
        "output": "qwert trewq wretq trewq tqwer rewqt",
        "is_hidden": true
      },
      {
        "input": "4\nasdf\nfdsa\ndsaf\nsafd",
        "output": "asdf fdsa dsaf safd",
        "is_hidden": true
      },
      {
        "input": "3\nzxc\ncxz\nxcz",
        "output": "zxc cxz xcz",
        "is_hidden": true
      },
      {
        "input": "2\nmn\nnm",
        "output": "mn nm",
        "is_hidden": true
      },
      {
        "input": "10\na\nb\nc\nd\ne\nf\ng\nh\ni\nj",
        "output": "j\ng\nf\ni\ne\nc\nh\nb\nd\na",
        "is_hidden": true
      },
      {
        "input": "5\nbanana\nananab\nnanaab\nbanaan\nanbana",
        "output": "banana ananab nanaab banaan anbana",
        "is_hidden": true
      },
      {
        "input": "6\nstatus\ntatsus\nustats\nsutats\ntsatsu\nssutat",
        "output": "status tatsus ustats sutats tsatsu ssutat",
        "is_hidden": true
      },
      {
        "input": "4\nracecar\ncarrace\naracecr\nrraceca",
        "output": "racecar carrace aracecr rraceca",
        "is_hidden": true
      },
      {
        "input": "3\nlevel\nevell\nlveel",
        "output": "level evell lveel",
        "is_hidden": true
      },
      {
        "input": "2\nmadam\nmadam",
        "output": "madam madam",
        "is_hidden": true
      }
    ]
  },
  {
    "title": "Course Schedule",
    "input": "The first line contains `numCourses` and `p`, the number of prerequisites. The next `p` lines each contain a pair `ai bi`.",
    "output": "`YES` or `NO`.",
    "description": "There are a total of `numCourses` courses you have to take, labeled from 0 to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`. Return `YES` if you can finish all courses. Otherwise, return `NO`.",
    "difficulty": "medium",
    "categories": ["graph", "sorting"],
    "examples": [
      {
        "input": "2 1\n1 0",
        "output": "YES",
        "is_hidden": false
      },
      {
        "input": "2 2\n1 0\n0 1",
        "output": "NO",
        "is_hidden": false
      }
    ],
    "constraints": [],
    "hints": [
      "This problem is equivalent to finding if a cycle exists in a directed graph. Topological sort can be used."
    ],
    "test_cases": [
      {
        "input": "2 1\n1 0",
        "output": "YES",
        "is_hidden": false
      },
      {
        "input": "2 2\n1 0\n0 1",
        "output": "NO",
        "is_hidden": false
      },
      {
        "input": "5 4\n1 0\n2 0\n3 1\n4 2",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "1 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "2 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "3 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "4 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "10 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "20 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "3 2\n1 0\n2 1",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "3 3\n1 0\n2 1\n0 2",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "4 3\n1 0\n2 1\n3 2",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "4 4\n1 0\n2 1\n3 2\n0 3",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5 5\n1 0\n2 1\n3 2\n4 3\n0 4",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5 4\n1 0\n2 0\n3 0\n4 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5 4\n0 1\n0 2\n0 3\n0 4",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "6 5\n1 0\n2 0\n3 1\n4 1\n5 2",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "6 6\n1 0\n2 0\n3 1\n4 1\n5 2\n0 5",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "7 6\n1 0\n2 0\n3 1\n4 1\n5 2\n6 2",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "7 7\n1 0\n2 0\n3 1\n4 1\n5 2\n6 2\n0 6",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "8 7\n1 0\n2 0\n3 1\n4 1\n5 2\n6 2\n7 3",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "8 8\n1 0\n2 0\n3 1\n4 1\n5 2\n6 2\n7 3\n0 7",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "10 9\n1 0\n2 0\n3 1\n4 1\n5 2\n6 2\n7 3\n8 3\n9 4",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "10 10\n1 0\n2 0\n3 1\n4 1\n5 2\n6 2\n7 3\n8 3\n9 4\n0 9",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "4 2\n1 0\n3 2",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "4 3\n1 0\n2 1\n3 0",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5 4\n1 0\n2 1\n3 0\n4 3",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "6 5\n1 0\n2 1\n3 0\n4 3\n5 4",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "7 6\n1 0\n2 1\n3 0\n4 3\n5 4\n6 5",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "8 7\n1 0\n2 1\n3 0\n4 3\n5 4\n6 5\n7 6",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "9 8\n1 0\n2 1\n3 0\n4 3\n5 4\n6 5\n7 6\n8 7",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "10 9\n1 0\n2 1\n3 0\n4 3\n5 4\n6 5\n7 6\n8 7\n9 8",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "10 10\n1 0\n2 1\n3 0\n4 3\n5 4\n6 5\n7 6\n8 7\n9 8\n0 1",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "5 4\n0 1\n1 2\n2 3\n3 4",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "5 5\n0 1\n1 2\n2 3\n3 4\n4 0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "6 5\n0 1\n1 2\n2 3\n3 4\n4 5",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "6 6\n0 1\n1 2\n2 3\n3 4\n4 5\n5 0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "7 6\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "7 7\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "8 7\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "8 8\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "9 8\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8",
        "output": "YES",
        "is_hidden": true
      },
      {
        "input": "9 9\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 0",
        "output": "NO",
        "is_hidden": true
      },
      {
        "input": "10 9\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9",
        "output": "YES",
        "is_hidden": true
      }
    ]
  }
]
