INSERT INTO questions(id, title, description, difficulty_id, input, output, constraints, examples, hints) VALUES (1, 'Two Sum', 'Given an array of integers `nums` of length `n`, and an integer `target`, return the smallest indices of the two numbers such that they add up to target.

You may not use the same element twice.', 1, 'The first line contains two integers `n` and `target`. The second line contains `n` integers giving the elements in `nums`.', 'Two integers that are the smallest indices. Output `-1 -1` if there no answer.', ARRAY []::TEXT[], '[{"input": "4 9\n2 7 11 15", "output": "0 1"}, {"input": "3 6\n3 2 4", "output": "1 2"}]', ARRAY ['A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it is best to try out brute force solutions just for completeness. It is from these brute force solutions that you can come up with optimizations.']::TEXT[]);
INSERT INTO questions(id, title, description, difficulty_id, input, output, constraints, examples, hints) VALUES (2, 'Kth Largest Element in an Array', 'Given an integer array `nums` of length `n`, and an integer `k`, return the `kth` largest element in the array.', 2, 'The first line contains two integers `n` and `k`. The second line contains `n` integers giving the elements in `nums`.', 'An integer that is the `kth` largest element in the array.', ARRAY []::TEXT[], '[{"input": "6 2\n3 2 1 5 6 4", "output": "5"}, {"input": "9 4\n3 2 3 1 2 4 5 5 6", "output": "4"}]', ARRAY []::TEXT[]);
INSERT INTO questions(id, title, description, difficulty_id, input, output, constraints, examples, hints) VALUES (3, 'Longest Palindrome Substring', 'Given a string `s`, return the longest palindrome substring in `s`.

A string is a palindrome when it reads the same backward as forward.

If there are multiple answers, return the substring with the smallest indices.', 2, 'A single string `s`.', 'A single string that is the longest palindrome substring.', ARRAY ['`s` contains only digits and English letters.']::TEXT[], '[{"input": "babad", "output": "bab"}, {"input": "cbbd", "output": "bb"}]', ARRAY []::TEXT[]);
INSERT INTO questions(id, title, description, difficulty_id, input, output, constraints, examples, hints) VALUES (4, 'Search Insert Position', 'Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.', 1, 'The first line contains two integers `n` and `target`. The second line contains `n` integers giving the elements in `nums`.', 'An integer - index that would be inserted.', ARRAY ['`nums` contains **distinct** values and are sorted in **ascending** order.']::TEXT[], '[{"input": "4 5\n1 3 5 6", "output": "2"}, {"input": "4 2\n1 3 5 6", "output": "1"}]', ARRAY []::TEXT[]);
INSERT INTO questions(id, title, description, difficulty_id, input, output, constraints, examples, hints) VALUES (5, 'Jump Game', 'You are given an integer array `nums` of size `n`. You are initially positioned at the **first index**, and each element in the array represents your maximum jump length at that position.

Determine whether or not you can reach the last index.', 2, 'The first line contains an integer `n` indicating the length of the array `nums`. The next line contains `n` integers, that are elements of `num`.', 'Output `YES` if the position is reachable, else output `NO`.', ARRAY []::TEXT[], '[{"input": "5\n2 3 1 1 4", "output": "YES"}, {"input": "5\n3 2 1 0 4", "output": "NO"}]', ARRAY []::TEXT[]);
INSERT INTO questions(id, title, description, difficulty_id, input, output, constraints, examples, hints) VALUES (6, 'number_of_islands', 'Given an `m x n` 2D binary grid which represents a map `1`s (land) and `0`s (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. ', 2, 'The first line contains two integers `m` and `n`. For the next `m` lines, each line contains `n` integers where each integer is either `0` or `1`.', 'A single integer that is the number of islands.', ARRAY []::TEXT[], '[{"input": "4 5\n1 1 1 1 0\n1 1 0 1 0\n1 1 0 0 0\n0 0 0 0 0", "output": "1"}, {"input": "4 5\n1 1 0 0 0 \n1 1 0 0 0\n0 0 1 0 0\n0 0 0 1 1", "output": "3"}]', ARRAY []::TEXT[]);
INSERT INTO questions(id, title, description, difficulty_id, input, output, constraints, examples, hints) VALUES (7, 'Trapping Rain Water', 'Given `n` non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.', 3, 'The first line contains an integer `n`. The next line contains `n` non-negative integers.', 'A single integer that is the amount of water it can trap after raining.', ARRAY []::TEXT[], '[{"input": "12\n0 1 0 2 1 0 1 3 2 1 2 1", "output": "6"}, {"input": "6\n4 2 0 3 2 5", "output": "9"}]', ARRAY []::TEXT[]);
INSERT INTO questions(id, title, description, difficulty_id, input, output, constraints, examples, hints) VALUES (8, 'Exam Manipulation', 'A group of students is taking a True/False exam. Each question is worth one point. You, as their teacher, want to make your students look as good as possibleâ€”so you cheat! (I know, you would never actually do that.) To cheat, you manipulate the answer key so that the lowest score in the class is as high as possible.

What is the best possible lowest score you can achieve?', 2, 'The first line contains two integers `n` and `k`, where `n` is the number of students and `k` is the number of True/False questions on the exam.

Each of the next `n` lines contains a string of length `k`, consisting only of upper-case T and upper-case F. This string represents the answers that a student submitted, in the order the questions were given.', 'A single integer, the best possible lowest score in the class.', ARRAY ['1 <= n <= 1000', '1 <= k <= 10']::TEXT[], '[{"input": "5 4\nTFTF\nTFFF\nTFTT\nTFFT\nTFTF", "output": "2"}, {"input": "3 5\nTFTFT\nTFTFT\nTFTFT", "output": "5"}]', ARRAY []::TEXT[]);
